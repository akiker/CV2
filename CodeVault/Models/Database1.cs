

// ------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
// 
// Do not make changes directly to this file - edit the template instead.
// 
// The following connection settings were used to generate this file:
//     Configuration file:     "CodeVault\Web.config"
//     Connection String Name: "CV2Context"
//     Connection String:      "data source=.\sqlexpress;initial catalog=CV2;integrated security=True;MultipleActiveResultSets=True;App=EntityFramework"
// </auto-generated>
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// ReSharper disable RedundantUsingDirective
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Data.Entity.Infrastructure;
using System.Linq.Expressions;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Data.Entity.ModelConfiguration;
using System.Threading;
using DatabaseGeneratedOption = System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption;

namespace CodeVault.Models
{
    // ************************************************************************
    // Unit of work
    public interface ICV2Context : IDisposable
    {
        DbSet<ConfigurationRecord> ConfigurationRecords { get; set; } // ConfigurationRecords
        DbSet<CV2_ApplicationPermission> CV2_ApplicationPermissions { get; set; } // ApplicationPermissions
        DbSet<CV2_ApplicationRole> CV2_ApplicationRoles { get; set; } // ApplicationRoles
        DbSet<CV2_ApplicationUser> CV2_ApplicationUsers { get; set; } // ApplicationUsers
        DbSet<CV2_Attachment> CV2_Attachments { get; set; } // Attachments
        DbSet<CV2_CosmicConfigRecord> CV2_CosmicConfigRecords { get; set; } // CosmicConfigRecords
        DbSet<CV2_Dependency> CV2_Dependencies { get; set; } // Dependencies
        DbSet<CV2_DistributionLocation> CV2_DistributionLocations { get; set; } // DistributionLocations
        DbSet<CV2_Document> CV2_Documents { get; set; } // Documents
        DbSet<CV2_InstallDetail> CV2_InstallDetails { get; set; } // InstallDetails
        DbSet<CV2_JournalEntry> CV2_JournalEntries { get; set; } // JournalEntries
        DbSet<CV2_KeyWord> CV2_KeyWords { get; set; } // KeyWords
        DbSet<CV2_License> CV2_Licenses { get; set; } // Licenses
        DbSet<CV2_LicenseKey> CV2_LicenseKeys { get; set; } // LicenseKeys
        DbSet<CV2_LicenseType> CV2_LicenseTypes { get; set; } // LicenseTypes
        DbSet<CV2_LocalAccountVerification> CV2_LocalAccountVerifications { get; set; } // LocalAccountVerifications
        DbSet<CV2_OsRequirement> CV2_OsRequirements { get; set; } // OsRequirements
        DbSet<CV2_Product> CV2_Products { get; set; } // Products
        DbSet<CV2_ProductCategory> CV2_ProductCategories { get; set; } // ProductCategories
        DbSet<CV2_ProductContact> CV2_ProductContacts { get; set; } // ProductContacts
        DbSet<CV2_ProductContactRole> CV2_ProductContactRoles { get; set; } // ProductContactRoles
        DbSet<CV2_ProductKeyWord> CV2_ProductKeyWords { get; set; } // ProductKeyWords
        DbSet<CV2_ProductPermission> CV2_ProductPermissions { get; set; } // ProductPermissions
        DbSet<CV2_ProductPermissionDetail> CV2_ProductPermissionDetails { get; set; } // ProductPermissionDetails
        DbSet<CV2_ProductType> CV2_ProductTypes { get; set; } // ProductTypes
        DbSet<CV2_ProjectType> CV2_ProjectTypes { get; set; } // ProjectTypes
        DbSet<CV2_Request> CV2_Requests { get; set; } // Requests
        DbSet<CV2_RequestHistory> CV2_RequestHistories { get; set; } // RequestHistories
        DbSet<CV2_RequestStatu> CV2_RequestStatus { get; set; } // RequestStatus
        DbSet<CV2_RequestType> CV2_RequestTypes { get; set; } // RequestTypes
        DbSet<CV2_SccmDeploymentDetail> CV2_SccmDeploymentDetails { get; set; } // SccmDeploymentDetails
        DbSet<CV2_SccmReturnCode> CV2_SccmReturnCodes { get; set; } // SccmReturnCodes
        DbSet<CV2_SccmRule> CV2_SccmRules { get; set; } // SccmRules
        DbSet<CV2_SoftwarePolicy> CV2_SoftwarePolicies { get; set; } // SoftwarePolicies
        DbSet<CV2_SoftwarePolicyGroupAssociation> CV2_SoftwarePolicyGroupAssociations { get; set; } // SoftwarePolicyGroupAssociations
        DbSet<CV2_SoftwarePolicySupportLevel> CV2_SoftwarePolicySupportLevels { get; set; } // SoftwarePolicySupportLevels
        DbSet<CV2_SoftwareRequirement> CV2_SoftwareRequirements { get; set; } // SoftwareRequirements
        DbSet<CV2_SupersededProduct> CV2_SupersededProducts { get; set; } // SupersededProducts
        DbSet<CV2_SystemRequirement> CV2_SystemRequirements { get; set; } // SystemRequirements
        DbSet<CV2_WorkQueue> CV2_WorkQueues { get; set; } // WorkQueues
        DbSet<Nhydrateobject> Nhydrateobjects { get; set; } // __nhydrateobjects
        DbSet<Nhydrateschema> Nhydrateschemas { get; set; } // __nhydrateschema
        DbSet<PackagesToAdd> PackagesToAdds { get; set; } // PackagesToAdd
        DbSet<PackagesToDelete> PackagesToDeletes { get; set; } // PackagesToDelete
        DbSet<ProductSummaryView> ProductSummaryViews { get; set; } // ProductSummaryView
        DbSet<SoftwareException> SoftwareExceptions { get; set; } // SoftwareExceptions

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(CancellationToken cancellationToken);
        
        // Stored Procedures
    }

    // ************************************************************************
    // Database context
    public class CV2Context : DbContext, ICV2Context
    {
        public DbSet<ConfigurationRecord> ConfigurationRecords { get; set; } // ConfigurationRecords
        public DbSet<CV2_ApplicationPermission> CV2_ApplicationPermissions { get; set; } // ApplicationPermissions
        public DbSet<CV2_ApplicationRole> CV2_ApplicationRoles { get; set; } // ApplicationRoles
        public DbSet<CV2_ApplicationUser> CV2_ApplicationUsers { get; set; } // ApplicationUsers
        public DbSet<CV2_Attachment> CV2_Attachments { get; set; } // Attachments
        public DbSet<CV2_CosmicConfigRecord> CV2_CosmicConfigRecords { get; set; } // CosmicConfigRecords
        public DbSet<CV2_Dependency> CV2_Dependencies { get; set; } // Dependencies
        public DbSet<CV2_DistributionLocation> CV2_DistributionLocations { get; set; } // DistributionLocations
        public DbSet<CV2_Document> CV2_Documents { get; set; } // Documents
        public DbSet<CV2_InstallDetail> CV2_InstallDetails { get; set; } // InstallDetails
        public DbSet<CV2_JournalEntry> CV2_JournalEntries { get; set; } // JournalEntries
        public DbSet<CV2_KeyWord> CV2_KeyWords { get; set; } // KeyWords
        public DbSet<CV2_License> CV2_Licenses { get; set; } // Licenses
        public DbSet<CV2_LicenseKey> CV2_LicenseKeys { get; set; } // LicenseKeys
        public DbSet<CV2_LicenseType> CV2_LicenseTypes { get; set; } // LicenseTypes
        public DbSet<CV2_LocalAccountVerification> CV2_LocalAccountVerifications { get; set; } // LocalAccountVerifications
        public DbSet<CV2_OsRequirement> CV2_OsRequirements { get; set; } // OsRequirements
        public DbSet<CV2_Product> CV2_Products { get; set; } // Products
        public DbSet<CV2_ProductCategory> CV2_ProductCategories { get; set; } // ProductCategories
        public DbSet<CV2_ProductContact> CV2_ProductContacts { get; set; } // ProductContacts
        public DbSet<CV2_ProductContactRole> CV2_ProductContactRoles { get; set; } // ProductContactRoles
        public DbSet<CV2_ProductKeyWord> CV2_ProductKeyWords { get; set; } // ProductKeyWords
        public DbSet<CV2_ProductPermission> CV2_ProductPermissions { get; set; } // ProductPermissions
        public DbSet<CV2_ProductPermissionDetail> CV2_ProductPermissionDetails { get; set; } // ProductPermissionDetails
        public DbSet<CV2_ProductType> CV2_ProductTypes { get; set; } // ProductTypes
        public DbSet<CV2_ProjectType> CV2_ProjectTypes { get; set; } // ProjectTypes
        public DbSet<CV2_Request> CV2_Requests { get; set; } // Requests
        public DbSet<CV2_RequestHistory> CV2_RequestHistories { get; set; } // RequestHistories
        public DbSet<CV2_RequestStatu> CV2_RequestStatus { get; set; } // RequestStatus
        public DbSet<CV2_RequestType> CV2_RequestTypes { get; set; } // RequestTypes
        public DbSet<CV2_SccmDeploymentDetail> CV2_SccmDeploymentDetails { get; set; } // SccmDeploymentDetails
        public DbSet<CV2_SccmReturnCode> CV2_SccmReturnCodes { get; set; } // SccmReturnCodes
        public DbSet<CV2_SccmRule> CV2_SccmRules { get; set; } // SccmRules
        public DbSet<CV2_SoftwarePolicy> CV2_SoftwarePolicies { get; set; } // SoftwarePolicies
        public DbSet<CV2_SoftwarePolicyGroupAssociation> CV2_SoftwarePolicyGroupAssociations { get; set; } // SoftwarePolicyGroupAssociations
        public DbSet<CV2_SoftwarePolicySupportLevel> CV2_SoftwarePolicySupportLevels { get; set; } // SoftwarePolicySupportLevels
        public DbSet<CV2_SoftwareRequirement> CV2_SoftwareRequirements { get; set; } // SoftwareRequirements
        public DbSet<CV2_SupersededProduct> CV2_SupersededProducts { get; set; } // SupersededProducts
        public DbSet<CV2_SystemRequirement> CV2_SystemRequirements { get; set; } // SystemRequirements
        public DbSet<CV2_WorkQueue> CV2_WorkQueues { get; set; } // WorkQueues
        public DbSet<Nhydrateobject> Nhydrateobjects { get; set; } // __nhydrateobjects
        public DbSet<Nhydrateschema> Nhydrateschemas { get; set; } // __nhydrateschema
        public DbSet<PackagesToAdd> PackagesToAdds { get; set; } // PackagesToAdd
        public DbSet<PackagesToDelete> PackagesToDeletes { get; set; } // PackagesToDelete
        public DbSet<ProductSummaryView> ProductSummaryViews { get; set; } // ProductSummaryView
        public DbSet<SoftwareException> SoftwareExceptions { get; set; } // SoftwareExceptions
        
        static CV2Context()
        {
            System.Data.Entity.Database.SetInitializer<CV2Context>(null);
        }

        public CV2Context()
            : base("Name=CV2Context")
        {
        }

        public CV2Context(string connectionString) : base(connectionString)
        {
        }

        public CV2Context(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model) : base(connectionString, model)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new ConfigurationRecordConfiguration());
            modelBuilder.Configurations.Add(new CV2_ApplicationPermissionConfiguration());
            modelBuilder.Configurations.Add(new CV2_ApplicationRoleConfiguration());
            modelBuilder.Configurations.Add(new CV2_ApplicationUserConfiguration());
            modelBuilder.Configurations.Add(new CV2_AttachmentConfiguration());
            modelBuilder.Configurations.Add(new CV2_CosmicConfigRecordConfiguration());
            modelBuilder.Configurations.Add(new CV2_DependencyConfiguration());
            modelBuilder.Configurations.Add(new CV2_DistributionLocationConfiguration());
            modelBuilder.Configurations.Add(new CV2_DocumentConfiguration());
            modelBuilder.Configurations.Add(new CV2_InstallDetailConfiguration());
            modelBuilder.Configurations.Add(new CV2_JournalEntryConfiguration());
            modelBuilder.Configurations.Add(new CV2_KeyWordConfiguration());
            modelBuilder.Configurations.Add(new CV2_LicenseConfiguration());
            modelBuilder.Configurations.Add(new CV2_LicenseKeyConfiguration());
            modelBuilder.Configurations.Add(new CV2_LicenseTypeConfiguration());
            modelBuilder.Configurations.Add(new CV2_LocalAccountVerificationConfiguration());
            modelBuilder.Configurations.Add(new CV2_OsRequirementConfiguration());
            modelBuilder.Configurations.Add(new CV2_ProductConfiguration());
            modelBuilder.Configurations.Add(new CV2_ProductCategoryConfiguration());
            modelBuilder.Configurations.Add(new CV2_ProductContactConfiguration());
            modelBuilder.Configurations.Add(new CV2_ProductContactRoleConfiguration());
            modelBuilder.Configurations.Add(new CV2_ProductKeyWordConfiguration());
            modelBuilder.Configurations.Add(new CV2_ProductPermissionConfiguration());
            modelBuilder.Configurations.Add(new CV2_ProductPermissionDetailConfiguration());
            modelBuilder.Configurations.Add(new CV2_ProductTypeConfiguration());
            modelBuilder.Configurations.Add(new CV2_ProjectTypeConfiguration());
            modelBuilder.Configurations.Add(new CV2_RequestConfiguration());
            modelBuilder.Configurations.Add(new CV2_RequestHistoryConfiguration());
            modelBuilder.Configurations.Add(new CV2_RequestStatuConfiguration());
            modelBuilder.Configurations.Add(new CV2_RequestTypeConfiguration());
            modelBuilder.Configurations.Add(new CV2_SccmDeploymentDetailConfiguration());
            modelBuilder.Configurations.Add(new CV2_SccmReturnCodeConfiguration());
            modelBuilder.Configurations.Add(new CV2_SccmRuleConfiguration());
            modelBuilder.Configurations.Add(new CV2_SoftwarePolicyConfiguration());
            modelBuilder.Configurations.Add(new CV2_SoftwarePolicyGroupAssociationConfiguration());
            modelBuilder.Configurations.Add(new CV2_SoftwarePolicySupportLevelConfiguration());
            modelBuilder.Configurations.Add(new CV2_SoftwareRequirementConfiguration());
            modelBuilder.Configurations.Add(new CV2_SupersededProductConfiguration());
            modelBuilder.Configurations.Add(new CV2_SystemRequirementConfiguration());
            modelBuilder.Configurations.Add(new CV2_WorkQueueConfiguration());
            modelBuilder.Configurations.Add(new NhydrateobjectConfiguration());
            modelBuilder.Configurations.Add(new NhydrateschemaConfiguration());
            modelBuilder.Configurations.Add(new PackagesToAddConfiguration());
            modelBuilder.Configurations.Add(new PackagesToDeleteConfiguration());
            modelBuilder.Configurations.Add(new ProductSummaryViewConfiguration());
            modelBuilder.Configurations.Add(new SoftwareExceptionConfiguration());
        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new ConfigurationRecordConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_ApplicationPermissionConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_ApplicationRoleConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_ApplicationUserConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_AttachmentConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_CosmicConfigRecordConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_DependencyConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_DistributionLocationConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_DocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_InstallDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_JournalEntryConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_KeyWordConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_LicenseConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_LicenseKeyConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_LicenseTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_LocalAccountVerificationConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_OsRequirementConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_ProductConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_ProductCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_ProductContactConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_ProductContactRoleConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_ProductKeyWordConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_ProductPermissionConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_ProductPermissionDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_ProductTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_ProjectTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_RequestConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_RequestHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_RequestStatuConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_RequestTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_SccmDeploymentDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_SccmReturnCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_SccmRuleConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_SoftwarePolicyConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_SoftwarePolicyGroupAssociationConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_SoftwarePolicySupportLevelConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_SoftwareRequirementConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_SupersededProductConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_SystemRequirementConfiguration(schema));
            modelBuilder.Configurations.Add(new CV2_WorkQueueConfiguration(schema));
            modelBuilder.Configurations.Add(new NhydrateobjectConfiguration(schema));
            modelBuilder.Configurations.Add(new NhydrateschemaConfiguration(schema));
            modelBuilder.Configurations.Add(new PackagesToAddConfiguration(schema));
            modelBuilder.Configurations.Add(new PackagesToDeleteConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductSummaryViewConfiguration(schema));
            modelBuilder.Configurations.Add(new SoftwareExceptionConfiguration(schema));
            return modelBuilder;
        }
        
        // Stored Procedures
    }

    // ************************************************************************
    // Fake Database context
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class FakeCV2Context : ICV2Context
    {
        public DbSet<ConfigurationRecord> ConfigurationRecords { get; set; }
        public DbSet<CV2_ApplicationPermission> CV2_ApplicationPermissions { get; set; }
        public DbSet<CV2_ApplicationRole> CV2_ApplicationRoles { get; set; }
        public DbSet<CV2_ApplicationUser> CV2_ApplicationUsers { get; set; }
        public DbSet<CV2_Attachment> CV2_Attachments { get; set; }
        public DbSet<CV2_CosmicConfigRecord> CV2_CosmicConfigRecords { get; set; }
        public DbSet<CV2_Dependency> CV2_Dependencies { get; set; }
        public DbSet<CV2_DistributionLocation> CV2_DistributionLocations { get; set; }
        public DbSet<CV2_Document> CV2_Documents { get; set; }
        public DbSet<CV2_InstallDetail> CV2_InstallDetails { get; set; }
        public DbSet<CV2_JournalEntry> CV2_JournalEntries { get; set; }
        public DbSet<CV2_KeyWord> CV2_KeyWords { get; set; }
        public DbSet<CV2_License> CV2_Licenses { get; set; }
        public DbSet<CV2_LicenseKey> CV2_LicenseKeys { get; set; }
        public DbSet<CV2_LicenseType> CV2_LicenseTypes { get; set; }
        public DbSet<CV2_LocalAccountVerification> CV2_LocalAccountVerifications { get; set; }
        public DbSet<CV2_OsRequirement> CV2_OsRequirements { get; set; }
        public DbSet<CV2_Product> CV2_Products { get; set; }
        public DbSet<CV2_ProductCategory> CV2_ProductCategories { get; set; }
        public DbSet<CV2_ProductContact> CV2_ProductContacts { get; set; }
        public DbSet<CV2_ProductContactRole> CV2_ProductContactRoles { get; set; }
        public DbSet<CV2_ProductKeyWord> CV2_ProductKeyWords { get; set; }
        public DbSet<CV2_ProductPermission> CV2_ProductPermissions { get; set; }
        public DbSet<CV2_ProductPermissionDetail> CV2_ProductPermissionDetails { get; set; }
        public DbSet<CV2_ProductType> CV2_ProductTypes { get; set; }
        public DbSet<CV2_ProjectType> CV2_ProjectTypes { get; set; }
        public DbSet<CV2_Request> CV2_Requests { get; set; }
        public DbSet<CV2_RequestHistory> CV2_RequestHistories { get; set; }
        public DbSet<CV2_RequestStatu> CV2_RequestStatus { get; set; }
        public DbSet<CV2_RequestType> CV2_RequestTypes { get; set; }
        public DbSet<CV2_SccmDeploymentDetail> CV2_SccmDeploymentDetails { get; set; }
        public DbSet<CV2_SccmReturnCode> CV2_SccmReturnCodes { get; set; }
        public DbSet<CV2_SccmRule> CV2_SccmRules { get; set; }
        public DbSet<CV2_SoftwarePolicy> CV2_SoftwarePolicies { get; set; }
        public DbSet<CV2_SoftwarePolicyGroupAssociation> CV2_SoftwarePolicyGroupAssociations { get; set; }
        public DbSet<CV2_SoftwarePolicySupportLevel> CV2_SoftwarePolicySupportLevels { get; set; }
        public DbSet<CV2_SoftwareRequirement> CV2_SoftwareRequirements { get; set; }
        public DbSet<CV2_SupersededProduct> CV2_SupersededProducts { get; set; }
        public DbSet<CV2_SystemRequirement> CV2_SystemRequirements { get; set; }
        public DbSet<CV2_WorkQueue> CV2_WorkQueues { get; set; }
        public DbSet<Nhydrateobject> Nhydrateobjects { get; set; }
        public DbSet<Nhydrateschema> Nhydrateschemas { get; set; }
        public DbSet<PackagesToAdd> PackagesToAdds { get; set; }
        public DbSet<PackagesToDelete> PackagesToDeletes { get; set; }
        public DbSet<ProductSummaryView> ProductSummaryViews { get; set; }
        public DbSet<SoftwareException> SoftwareExceptions { get; set; }

        public FakeCV2Context()
        {
            ConfigurationRecords = new FakeDbSet<ConfigurationRecord>();
            CV2_ApplicationPermissions = new FakeDbSet<CV2_ApplicationPermission>();
            CV2_ApplicationRoles = new FakeDbSet<CV2_ApplicationRole>();
            CV2_ApplicationUsers = new FakeDbSet<CV2_ApplicationUser>();
            CV2_Attachments = new FakeDbSet<CV2_Attachment>();
            CV2_CosmicConfigRecords = new FakeDbSet<CV2_CosmicConfigRecord>();
            CV2_Dependencies = new FakeDbSet<CV2_Dependency>();
            CV2_DistributionLocations = new FakeDbSet<CV2_DistributionLocation>();
            CV2_Documents = new FakeDbSet<CV2_Document>();
            CV2_InstallDetails = new FakeDbSet<CV2_InstallDetail>();
            CV2_JournalEntries = new FakeDbSet<CV2_JournalEntry>();
            CV2_KeyWords = new FakeDbSet<CV2_KeyWord>();
            CV2_Licenses = new FakeDbSet<CV2_License>();
            CV2_LicenseKeys = new FakeDbSet<CV2_LicenseKey>();
            CV2_LicenseTypes = new FakeDbSet<CV2_LicenseType>();
            CV2_LocalAccountVerifications = new FakeDbSet<CV2_LocalAccountVerification>();
            CV2_OsRequirements = new FakeDbSet<CV2_OsRequirement>();
            CV2_Products = new FakeDbSet<CV2_Product>();
            CV2_ProductCategories = new FakeDbSet<CV2_ProductCategory>();
            CV2_ProductContacts = new FakeDbSet<CV2_ProductContact>();
            CV2_ProductContactRoles = new FakeDbSet<CV2_ProductContactRole>();
            CV2_ProductKeyWords = new FakeDbSet<CV2_ProductKeyWord>();
            CV2_ProductPermissions = new FakeDbSet<CV2_ProductPermission>();
            CV2_ProductPermissionDetails = new FakeDbSet<CV2_ProductPermissionDetail>();
            CV2_ProductTypes = new FakeDbSet<CV2_ProductType>();
            CV2_ProjectTypes = new FakeDbSet<CV2_ProjectType>();
            CV2_Requests = new FakeDbSet<CV2_Request>();
            CV2_RequestHistories = new FakeDbSet<CV2_RequestHistory>();
            CV2_RequestStatus = new FakeDbSet<CV2_RequestStatu>();
            CV2_RequestTypes = new FakeDbSet<CV2_RequestType>();
            CV2_SccmDeploymentDetails = new FakeDbSet<CV2_SccmDeploymentDetail>();
            CV2_SccmReturnCodes = new FakeDbSet<CV2_SccmReturnCode>();
            CV2_SccmRules = new FakeDbSet<CV2_SccmRule>();
            CV2_SoftwarePolicies = new FakeDbSet<CV2_SoftwarePolicy>();
            CV2_SoftwarePolicyGroupAssociations = new FakeDbSet<CV2_SoftwarePolicyGroupAssociation>();
            CV2_SoftwarePolicySupportLevels = new FakeDbSet<CV2_SoftwarePolicySupportLevel>();
            CV2_SoftwareRequirements = new FakeDbSet<CV2_SoftwareRequirement>();
            CV2_SupersededProducts = new FakeDbSet<CV2_SupersededProduct>();
            CV2_SystemRequirements = new FakeDbSet<CV2_SystemRequirement>();
            CV2_WorkQueues = new FakeDbSet<CV2_WorkQueue>();
            Nhydrateobjects = new FakeDbSet<Nhydrateobject>();
            Nhydrateschemas = new FakeDbSet<Nhydrateschema>();
            PackagesToAdds = new FakeDbSet<PackagesToAdd>();
            PackagesToDeletes = new FakeDbSet<PackagesToDelete>();
            ProductSummaryViews = new FakeDbSet<ProductSummaryView>();
            SoftwareExceptions = new FakeDbSet<SoftwareException>();
        }
        
        public int SaveChangesCount { get; private set; } 
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            throw new NotImplementedException();
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            throw new NotImplementedException();
        }

        protected virtual void Dispose(bool disposing)
        {
        }
        
        public void Dispose()
        {
            Dispose(true);
        }
        
        // Stored Procedures
    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable, IEnumerable<TEntity>, IDbAsyncEnumerable<TEntity> 
        where TEntity : class 
    { 
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;
 
        public FakeDbSet() 
        { 
            _data = new ObservableCollection<TEntity>(); 
            _query = _data.AsQueryable(); 
        }

        public override IEnumerable<TEntity> AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }
        
        public override TEntity Add(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Remove(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Remove(item); 
            return item; 
        } 
 
        public override TEntity Attach(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Create() 
        { 
            return Activator.CreateInstance<TEntity>(); 
        } 
 
        public override TDerivedEntity Create<TDerivedEntity>() 
        { 
            return Activator.CreateInstance<TDerivedEntity>(); 
        } 
 
        public override ObservableCollection<TEntity> Local 
        { 
            get { return _data; } 
        } 
 
        Type IQueryable.ElementType 
        { 
            get { return _query.ElementType; } 
        } 
 
        Expression IQueryable.Expression 
        { 
            get { return _query.Expression; } 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); } 
        } 
 
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        IDbAsyncEnumerator<TEntity> IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator()); 
        }
    } 
 
    public class FakeDbAsyncQueryProvider<TEntity> : IDbAsyncQueryProvider 
    { 
        private readonly IQueryProvider _inner; 
 
        public FakeDbAsyncQueryProvider(IQueryProvider inner) 
        { 
            _inner = inner; 
        } 
 
        public IQueryable CreateQuery(Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TEntity>(expression); 
        } 
 
        public IQueryable<TElement> CreateQuery<TElement>(Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TElement>(expression); 
        } 
 
        public object Execute(Expression expression) 
        { 
            return _inner.Execute(expression); 
        } 
 
        public TResult Execute<TResult>(Expression expression) 
        { 
            return _inner.Execute<TResult>(expression); 
        } 
 
        public System.Threading.Tasks.Task<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute(expression)); 
        } 
 
        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression)); 
        } 
    } 
 
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IDbAsyncEnumerable<T>, IQueryable<T> 
    { 
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable) 
            : base(enumerable) 
        { } 
 
        public FakeDbAsyncEnumerable(Expression expression) 
            : base(expression) 
        { } 
 
        public IDbAsyncEnumerator<T> GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator()); 
        } 
 
        IDbAsyncEnumerator IDbAsyncEnumerable.GetAsyncEnumerator() 
        { 
            return GetAsyncEnumerator(); 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<T>(this); } 
        } 
    } 
 
    public class FakeDbAsyncEnumerator<T> : IDbAsyncEnumerator<T> 
    { 
        private readonly IEnumerator<T> _inner; 
 
        public FakeDbAsyncEnumerator(IEnumerator<T> inner) 
        { 
            _inner = inner; 
        } 
 
        public void Dispose() 
        { 
            _inner.Dispose(); 
        } 
 
        public System.Threading.Tasks.Task<bool> MoveNextAsync(CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext()); 
        } 
 
        public T Current 
        { 
            get { return _inner.Current; } 
        } 
 
        object IDbAsyncEnumerator.Current 
        { 
            get { return Current; } 
        } 
    }

    // ************************************************************************
    // POCO classes

    // ConfigurationRecords
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class ConfigurationRecord
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name
        public string Description { get; set; } // Description
        public string Status { get; set; } // Status
        public string AutoImage { get; set; } // AutoImage
        public string AssignedImage { get; set; } // AssignedImage
        public bool InstallBaseApps { get; set; } // InstallBaseApps
        public string Key { get; set; } // Key
        public string Ou { get; set; } // OU

        // Reverse navigation
        public virtual ICollection<PackagesToAdd> PackagesToAdds { get; set; } // PackagesToAdd.FK_ConfigurationRecordsPackagesToAdd
        public virtual ICollection<PackagesToDelete> PackagesToDeletes { get; set; } // PackagesToDelete.FK_ConfigurationRecordsPackagesToDelete
        public virtual ICollection<SoftwareException> SoftwareExceptions { get; set; } // SoftwareExceptions.FK_ConfigurationRecordsSoftwareExceptions
        
        public ConfigurationRecord()
        {
            PackagesToAdds = new List<PackagesToAdd>();
            PackagesToDeletes = new List<PackagesToDelete>();
            SoftwareExceptions = new List<SoftwareException>();
        }
    }

    // ApplicationPermissions
    public class CV2_ApplicationPermission
    {
        public int ApplicationPermissionId { get; set; } // ApplicationPermissionId (Primary key)
        public bool Approve { get; set; } // Approve
        public bool UserAdmin { get; set; } // UserAdmin
        public int ApplicationRoleId { get; set; } // ApplicationRoleId

        // Foreign keys
        public virtual CV2_ApplicationRole CV2_ApplicationRole { get; set; } // FK_CV2.ApplicationPermissions_CV2.ApplicationRoles_ApplicationRoleId
    }

    // ApplicationRoles
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class CV2_ApplicationRole
    {
        public int ApplicationRoleId { get; set; } // ApplicationRoleId (Primary key)
        public string ApplicationRoleName { get; set; } // ApplicationRoleName
        public string ApplicationRoleDescription { get; set; } // ApplicationRoleDescription
        public DateTime CreatedOnDate { get; set; } // CreatedOnDate
        public byte[] RowVersion { get; set; } // RowVersion

        // Reverse navigation
        public virtual ICollection<CV2_ApplicationPermission> CV2_ApplicationPermissions { get; set; } // ApplicationPermissions.FK_CV2.ApplicationPermissions_CV2.ApplicationRoles_ApplicationRoleId
        public virtual ICollection<CV2_ApplicationUser> CV2_ApplicationUsers { get; set; } // ApplicationUsers.FK_CV2.ApplicationUsers_CV2.ApplicationRoles_ApplicationRoleId
        
        public CV2_ApplicationRole()
        {
            CV2_ApplicationPermissions = new List<CV2_ApplicationPermission>();
            CV2_ApplicationUsers = new List<CV2_ApplicationUser>();
        }
    }

    // ApplicationUsers
    public class CV2_ApplicationUser
    {
        public int ApplicationUserId { get; set; } // ApplicationUserId (Primary key)
        public string ApplicationUserLoginId { get; set; } // ApplicationUserLoginId
        public string ApplicationUserName { get; set; } // ApplicationUserName
        public string ApplicationUserEmail { get; set; } // ApplicationUserEmail
        public string ApplicationUserPhoneNumber { get; set; } // ApplicationUserPhoneNumber
        public int ApplicationRoleId { get; set; } // ApplicationRoleId
        public DateTime CreatedOnDate { get; set; } // CreatedOnDate
        public byte[] RowVersion { get; set; } // RowVersion
        public int WorkQueueId { get; set; } // WorkQueueId

        // Foreign keys
        public virtual CV2_ApplicationRole CV2_ApplicationRole { get; set; } // FK_CV2.ApplicationUsers_CV2.ApplicationRoles_ApplicationRoleId
        public virtual CV2_WorkQueue CV2_WorkQueue { get; set; } // FK_CV2.ApplicationUsers_CV2.WorkQueues_WorkQueueId
    }

    // Attachments
    public class CV2_Attachment
    {
        public int AttachementId { get; set; } // AttachementId (Primary key)
        public string AttachmentName { get; set; } // AttachmentName
        public byte[] AttachmentContents { get; set; } // AttachmentContents
        public string AttachmentExtension { get; set; } // AttachmentExtension
        public byte[] RowVersion { get; set; } // RowVersion
        public int? DocumentId { get; set; } // DocumentId

        // Foreign keys
        public virtual CV2_Document CV2_Document { get; set; } // FK_CV2.Attachments_CV2.Documents_DocumentId
    }

    // CosmicConfigRecords
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class CV2_CosmicConfigRecord
    {
        public int CosmicConfigRecordId { get; set; } // CosmicConfigRecordId (Primary key)
        public string CosmicConfigRecordName { get; set; } // CosmicConfigRecordName
        public string CosmicConfigRecordCreatedBy { get; set; } // CosmicConfigRecordCreatedBy

        // Reverse navigation
        public virtual ICollection<CV2_Product> CV2_Products { get; set; } // Products.FK_CV2.Products_CV2.CosmicConfigRecords_CosmicConfigRecordId
        
        public CV2_CosmicConfigRecord()
        {
            CV2_Products = new List<CV2_Product>();
        }
    }

    // Dependencies
    public class CV2_Dependency
    {
        public int BaseProductId { get; set; } // BaseProductId (Primary key)
        public int DependencyProductId { get; set; } // DependencyProductId (Primary key)
        public int InstallOrder { get; set; } // InstallOrder
        public int DependencyType { get; set; } // DependencyType
        public int? ProductProductId { get; set; } // Product_ProductId

        // Foreign keys
        public virtual CV2_Product CV2_Product_BaseProductId { get; set; } // FK_CV2.Dependencies_CV2.Products_BaseProductId
        public virtual CV2_Product CV2_Product_DependencyProductId { get; set; } // FK_CV2.Dependencies_CV2.Products_DependencyProductId
        public virtual CV2_Product CV2_Product_ProductProductId { get; set; } // FK_CV2.Dependencies_CV2.Products_Product_ProductId
    }

    // DistributionLocations
    public class CV2_DistributionLocation
    {
        public int DistributionLocationId { get; set; } // DistributionLocationId (Primary key)
        public string DistributionPath { get; set; } // DistributionPath
        public int DistributionMethod { get; set; } // DistributionMethod
        public int? ProductId { get; set; } // ProductId

        // Foreign keys
        public virtual CV2_Product CV2_Product { get; set; } // FK_CV2.DistributionLocations_CV2.Products_ProductId
    }

    // Documents
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class CV2_Document
    {
        public int DocumentId { get; set; } // DocumentId (Primary key)
        public string DocumentTitle { get; set; } // DocumentTitle
        public int DocumentType { get; set; } // DocumentType
        public byte[] DocumentContents { get; set; } // DocumentContents
        public string DocumentExtension { get; set; } // DocumentExtension
        public string DocumentCreatedBy { get; set; } // DocumentCreatedBy
        public DateTime DocumentCreatedOn { get; set; } // DocumentCreatedOn
        public byte[] RowVersion { get; set; } // RowVersion
        public int? ProductId { get; set; } // ProductId

        // Reverse navigation
        public virtual ICollection<CV2_Attachment> CV2_Attachments { get; set; } // Attachments.FK_CV2.Attachments_CV2.Documents_DocumentId
        public virtual ICollection<CV2_KeyWord> CV2_KeyWords { get; set; } // Many to many mapping

        // Foreign keys
        public virtual CV2_Product CV2_Product { get; set; } // FK_CV2.Documents_CV2.Products_ProductId
        
        public CV2_Document()
        {
            CV2_Attachments = new List<CV2_Attachment>();
            CV2_KeyWords = new List<CV2_KeyWord>();
        }
    }

    // InstallDetails
    public class CV2_InstallDetail
    {
        public int ProductId { get; set; } // ProductId (Primary key)
        public string InstallDetailFileName { get; set; } // InstallDetailFileName
        public string InstallDetailTransformFileName { get; set; } // InstallDetailTransformFileName
        public long InstallDetailFileSize { get; set; } // InstallDetailFileSize
        public bool InstallDetailRebootRequired { get; set; } // InstallDetailRebootRequired
        public string InstallDetailInstallCommand { get; set; } // InstallDetailInstallCommand
        public string InstallDetailUninstallCommand { get; set; } // InstallDetailUninstallCommand
        public string InstallDetailSourceLocation { get; set; } // InstallDetailSourceLocation

        // Foreign keys
        public virtual CV2_Product CV2_Product { get; set; } // FK_CV2.InstallDetails_CV2.Products_ProductId
    }

    // JournalEntries
    public class CV2_JournalEntry
    {
        public int JournalEntryId { get; set; } // JournalEntryId (Primary key)
        public int JournalEntryType { get; set; } // JournalEntryType
        public string JournalEntryText { get; set; } // JournalEntryText
        public string JournalEntryCreatedBy { get; set; } // JournalEntryCreatedBy
        public DateTime JournalEntryCreatedOn { get; set; } // JournalEntryCreatedOn
        public byte[] RowVersion { get; set; } // RowVersion
        public int ProductId { get; set; } // ProductId

        // Foreign keys
        public virtual CV2_Product CV2_Product { get; set; } // FK_CV2.JournalEntries_CV2.Products_ProductId
    }

    // KeyWords
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class CV2_KeyWord
    {
        public int KeyWordId { get; set; } // KeyWordId (Primary key)
        public string Word { get; set; } // Word

        // Reverse navigation
        public virtual ICollection<CV2_Document> CV2_Documents { get; set; } // Many to many mapping
        
        public CV2_KeyWord()
        {
            CV2_Documents = new List<CV2_Document>();
        }
    }

    // Licenses
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class CV2_License
    {
        public int LicenseId { get; set; } // LicenseId (Primary key)
        public string LicenseSku { get; set; } // LicenseSku
        public string LicenseNotes { get; set; } // LicenseNotes
        public string LicenseOwner { get; set; } // LicenseOwner
        public int? LicenseTypeId { get; set; } // LicenseTypeId
        public int? ProductId { get; set; } // ProductId

        // Reverse navigation
        public virtual ICollection<CV2_LicenseKey> CV2_LicenseKeys { get; set; } // LicenseKeys.FK_CV2.LicenseKeys_CV2.Licenses_LicenseId

        // Foreign keys
        public virtual CV2_LicenseType CV2_LicenseType { get; set; } // FK_CV2.Licenses_CV2.LicenseTypes_LicenseTypeId
        public virtual CV2_Product CV2_Product { get; set; } // FK_CV2.Licenses_CV2.Products_ProductId
        
        public CV2_License()
        {
            CV2_LicenseKeys = new List<CV2_LicenseKey>();
        }
    }

    // LicenseKeys
    public class CV2_LicenseKey
    {
        public int LicenseKeyId { get; set; } // LicenseKeyId (Primary key)
        public string LicenseKeyData { get; set; } // LicenseKeyData
        public string LicenseKeyOwnerName { get; set; } // LicenseKeyOwnerName
        public string LicenseKeyOwnerEmail { get; set; } // LicenseKeyOwnerEmail
        public string LicenseKeyOwnerPhoneNumber { get; set; } // LicenseKeyOwnerPhoneNumber
        public int? LicenseId { get; set; } // LicenseId

        // Foreign keys
        public virtual CV2_License CV2_License { get; set; } // FK_CV2.LicenseKeys_CV2.Licenses_LicenseId
    }

    // LicenseTypes
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class CV2_LicenseType
    {
        public int LicenseTypeId { get; set; } // LicenseTypeId (Primary key)
        public string LicenseTypeName { get; set; } // LicenseTypeName

        // Reverse navigation
        public virtual ICollection<CV2_License> CV2_Licenses { get; set; } // Licenses.FK_CV2.Licenses_CV2.LicenseTypes_LicenseTypeId
        
        public CV2_LicenseType()
        {
            CV2_Licenses = new List<CV2_License>();
        }
    }

    // LocalAccountVerifications
    public class CV2_LocalAccountVerification
    {
        public int ProductId { get; set; } // ProductId (Primary key)
        public bool LocalAdminVerificationComplete { get; set; } // LocalAdminVerificationComplete
        public bool WorksWithLocalAdminAccount { get; set; } // WorksWithLocalAdminAccount

        // Foreign keys
        public virtual CV2_Product CV2_Product { get; set; } // FK_CV2.LocalAccountVerifications_CV2.Products_ProductId
    }

    // OsRequirements
    public class CV2_OsRequirement
    {
        public int ProductId { get; set; } // ProductId (Primary key)
        public bool WindowsXp32Bit { get; set; } // WindowsXP_32Bit
        public bool WindowsVista32Bit { get; set; } // WindowsVista_32Bit
        public bool Windows732Bit { get; set; } // Windows7_32Bit
        public bool Windows832Bit { get; set; } // Windows8_32Bit
        public bool Windows8132Bit { get; set; } // Windows81_32Bit
        public bool WindowsXp64Bit { get; set; } // WindowsXP_64Bit
        public bool WindowsVista64Bit { get; set; } // WindowsVista_64Bit
        public bool Windows764Bit { get; set; } // Windows7_64Bit
        public bool Windows864Bit { get; set; } // Windows8_64Bit
        public bool Windows8164Bit { get; set; } // Windows81_64Bit
        public bool Windows1032Bit { get; set; } // Windows10_32Bit
        public bool Windows1064Bit { get; set; } // Windows10_64Bit

        // Foreign keys
        public virtual CV2_Product CV2_Product { get; set; } // FK_CV2.OsRequirements_CV2.Products_ProductId
        
        public CV2_OsRequirement()
        {
            Windows1032Bit = false;
            Windows1064Bit = false;
        }
    }

    // Products
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class CV2_Product
    {
        public int ProductId { get; set; } // ProductId (Primary key)
        public string ProductName { get; set; } // ProductName
        public string ProductVersion { get; set; } // ProductVersion
        public string ProductManufacturer { get; set; } // ProductManufacturer
        public string ProductDescription { get; set; } // ProductDescription
        public bool ProductIsDigitallySigned { get; set; } // ProductIsDigitallySigned
        public string ProductCode { get; set; } // ProductCode
        public string ProductUpgradeCode { get; set; } // ProductUpgradeCode
        public int ProductDslId { get; set; } // ProductDslId
        public int ProductCosmicId { get; set; } // ProductCosmicId
        public string ProductCosmicMsiGuid { get; set; } // ProductCosmicMsiGuid
        public int ProductStatus { get; set; } // ProductStatus
        public DateTime CreatedOnDate { get; set; } // CreatedOnDate
        public byte[] RowVersion { get; set; } // RowVersion
        public int? LegacyId { get; set; } // LegacyId
        public int? ProductCategoryId { get; set; } // ProductCategoryId
        public int? ProductTypeId { get; set; } // ProductTypeId
        public int? ProjectTypeId { get; set; } // ProjectTypeId
        public int? CosmicConfigRecordId { get; set; } // CosmicConfigRecordId

        // Reverse navigation
        public virtual CV2_InstallDetail CV2_InstallDetail { get; set; } // InstallDetails.FK_CV2.InstallDetails_CV2.Products_ProductId
        public virtual CV2_LocalAccountVerification CV2_LocalAccountVerification { get; set; } // LocalAccountVerifications.FK_CV2.LocalAccountVerifications_CV2.Products_ProductId
        public virtual CV2_OsRequirement CV2_OsRequirement { get; set; } // OsRequirements.FK_CV2.OsRequirements_CV2.Products_ProductId
        public virtual CV2_ProductPermission CV2_ProductPermission { get; set; } // ProductPermissions.FK_CV2.ProductPermissions_CV2.Products_ProductId
        public virtual CV2_SccmDeploymentDetail CV2_SccmDeploymentDetail { get; set; } // SccmDeploymentDetails.FK_CV2.SccmDeploymentDetails_CV2.Products_ProductId
        public virtual CV2_SoftwarePolicy CV2_SoftwarePolicy { get; set; } // SoftwarePolicies.FK_CV2.SoftwarePolicies_CV2.Products_ProductId
        public virtual CV2_SoftwareRequirement CV2_SoftwareRequirement { get; set; } // SoftwareRequirements.FK_CV2.SoftwareRequirements_CV2.Products_ProductId
        public virtual CV2_SystemRequirement CV2_SystemRequirement { get; set; } // SystemRequirements.FK_CV2.SystemRequirements_CV2.Products_ProductId
        public virtual ICollection<CV2_Dependency> CV2_Dependencies_BaseProductId { get; set; } // Many to many mapping
        public virtual ICollection<CV2_Dependency> CV2_Dependencies_DependencyProductId { get; set; } // Many to many mapping
        public virtual ICollection<CV2_Dependency> CV2_Dependencies_ProductProductId { get; set; } // Dependencies.FK_CV2.Dependencies_CV2.Products_Product_ProductId
        public virtual ICollection<CV2_DistributionLocation> CV2_DistributionLocations { get; set; } // DistributionLocations.FK_CV2.DistributionLocations_CV2.Products_ProductId
        public virtual ICollection<CV2_Document> CV2_Documents { get; set; } // Documents.FK_CV2.Documents_CV2.Products_ProductId
        public virtual ICollection<CV2_JournalEntry> CV2_JournalEntries { get; set; } // JournalEntries.FK_CV2.JournalEntries_CV2.Products_ProductId
        public virtual ICollection<CV2_License> CV2_Licenses { get; set; } // Licenses.FK_CV2.Licenses_CV2.Products_ProductId
        public virtual ICollection<CV2_ProductContact> CV2_ProductContacts { get; set; } // ProductContacts.FK_CV2.ProductContacts_CV2.Products_ProductId
        public virtual ICollection<CV2_ProductKeyWord> CV2_ProductKeyWords { get; set; } // Many to many mapping
        public virtual ICollection<CV2_ProductPermissionDetail> CV2_ProductPermissionDetails { get; set; } // ProductPermissionDetails.FK_CV2.ProductPermissionDetails_CV2.Products_ProductId
        public virtual ICollection<CV2_SccmReturnCode> CV2_SccmReturnCodes { get; set; } // SccmReturnCodes.FK_cv2.SccmReturnCodes_CV2.Products_ProductId
        public virtual ICollection<CV2_SccmRule> CV2_SccmRules { get; set; } // SccmRules.FK_CV2.SccmRules_CV2.Products_ProductId
        public virtual ICollection<CV2_SupersededProduct> CV2_SupersededProducts_BaseProductId { get; set; } // Many to many mapping
        public virtual ICollection<CV2_SupersededProduct> CV2_SupersededProducts_ProductProductId { get; set; } // SupersededProducts.FK_CV2.SupersededProducts_CV2.Products_Product_ProductId
        public virtual ICollection<CV2_SupersededProduct> CV2_SupersededProducts_SupersededProductId { get; set; } // Many to many mapping

        // Foreign keys
        public virtual CV2_CosmicConfigRecord CV2_CosmicConfigRecord { get; set; } // FK_CV2.Products_CV2.CosmicConfigRecords_CosmicConfigRecordId
        public virtual CV2_ProductCategory CV2_ProductCategory { get; set; } // FK_CV2.Products_CV2.ProductCategories_ProductCategoryId
        public virtual CV2_ProductType CV2_ProductType { get; set; } // FK_CV2.Products_CV2.ProductTypes_ProductTypeId
        public virtual CV2_ProjectType CV2_ProjectType { get; set; } // FK_CV2.Products_CV2.ProjectTypes_ProjectTypeId
        public virtual CV2_Request CV2_Request { get; set; } // FK_CV2.Products_CV2.Requests_ProductId
        
        public CV2_Product()
        {
            CV2_Dependencies_BaseProductId = new List<CV2_Dependency>();
            CV2_Dependencies_DependencyProductId = new List<CV2_Dependency>();
            CV2_Dependencies_ProductProductId = new List<CV2_Dependency>();
            CV2_DistributionLocations = new List<CV2_DistributionLocation>();
            CV2_Documents = new List<CV2_Document>();
            CV2_JournalEntries = new List<CV2_JournalEntry>();
            CV2_Licenses = new List<CV2_License>();
            CV2_ProductContacts = new List<CV2_ProductContact>();
            CV2_ProductPermissionDetails = new List<CV2_ProductPermissionDetail>();
            CV2_SccmReturnCodes = new List<CV2_SccmReturnCode>();
            CV2_SccmRules = new List<CV2_SccmRule>();
            CV2_SupersededProducts_BaseProductId = new List<CV2_SupersededProduct>();
            CV2_SupersededProducts_ProductProductId = new List<CV2_SupersededProduct>();
            CV2_SupersededProducts_SupersededProductId = new List<CV2_SupersededProduct>();
            CV2_ProductKeyWords = new List<CV2_ProductKeyWord>();
        }
    }

    // ProductCategories
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class CV2_ProductCategory
    {
        public int ProductCategoryId { get; set; } // ProductCategoryId (Primary key)
        public string ProductCategoryName { get; set; } // ProductCategoryName

        // Reverse navigation
        public virtual ICollection<CV2_Product> CV2_Products { get; set; } // Products.FK_CV2.Products_CV2.ProductCategories_ProductCategoryId
        
        public CV2_ProductCategory()
        {
            CV2_Products = new List<CV2_Product>();
        }
    }

    // ProductContacts
    public class CV2_ProductContact
    {
        public int ProductContactId { get; set; } // ProductContactId (Primary key)
        public string ProductContactLoginId { get; set; } // ProductContactLoginId
        public string ProductContactName { get; set; } // ProductContactName
        public string ProductContactEmail { get; set; } // ProductContactEmail
        public string ProductContactPhoneNumber { get; set; } // ProductContactPhoneNumber
        public int ProductContactRoleId { get; set; } // ProductContactRoleId
        public int ProductId { get; set; } // ProductId

        // Foreign keys
        public virtual CV2_Product CV2_Product { get; set; } // FK_CV2.ProductContacts_CV2.Products_ProductId
        public virtual CV2_ProductContactRole CV2_ProductContactRole { get; set; } // FK_CV2.ProductContacts_CV2.ProductContactRoles_ProductContactRoleId
    }

    // ProductContactRoles
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class CV2_ProductContactRole
    {
        public int ProductContactRoleId { get; set; } // ProductContactRoleId (Primary key)
        public string ProductContactRoleName { get; set; } // ProductContactRoleName

        // Reverse navigation
        public virtual ICollection<CV2_ProductContact> CV2_ProductContacts { get; set; } // ProductContacts.FK_CV2.ProductContacts_CV2.ProductContactRoles_ProductContactRoleId
        
        public CV2_ProductContactRole()
        {
            CV2_ProductContacts = new List<CV2_ProductContact>();
        }
    }

    // ProductKeyWords
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class CV2_ProductKeyWord
    {
        public int ProductKeyWordId { get; set; } // ProductKeyWordId (Primary key)
        public string Word { get; set; } // Word

        // Reverse navigation
        public virtual ICollection<CV2_Product> CV2_Products { get; set; } // Many to many mapping
        
        public CV2_ProductKeyWord()
        {
            CV2_Products = new List<CV2_Product>();
        }
    }

    // ProductPermissions
    public class CV2_ProductPermission
    {
        public int ProductId { get; set; } // ProductId (Primary key)
        public bool ElevatedRightsRequired { get; set; } // ElevatedRightsRequired
        public bool RequiresAdminRightsBasic { get; set; } // RequiresAdminRightsBasic
        public bool RequiresAdminRightsAdvanced { get; set; } // RequiresAdminRightsAdvanced
        public bool RequiresAdminRightsUpdates { get; set; } // RequiresAdminRightsUpdates

        // Foreign keys
        public virtual CV2_Product CV2_Product { get; set; } // FK_CV2.ProductPermissions_CV2.Products_ProductId
    }

    // ProductPermissionDetails
    public class CV2_ProductPermissionDetail
    {
        public int ProductPermissionDetailId { get; set; } // ProductPermissionDetailId (Primary key)
        public int ProductPermissionDetailAcl { get; set; } // ProductPermissionDetailAcl
        public int ProductPermissionDetailType { get; set; } // ProductPermissionDetailType
        public string ProductPermissionLocation { get; set; } // ProductPermissionLocation
        public string ProductPermissionGroupOrUserName { get; set; } // ProductPermissionGroupOrUserName
        public int? ProductId { get; set; } // ProductId

        // Foreign keys
        public virtual CV2_Product CV2_Product { get; set; } // FK_CV2.ProductPermissionDetails_CV2.Products_ProductId
    }

    // ProductTypes
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class CV2_ProductType
    {
        public int ProductTypeId { get; set; } // ProductTypeId (Primary key)
        public string ProductTypeName { get; set; } // ProductTypeName

        // Reverse navigation
        public virtual ICollection<CV2_Product> CV2_Products { get; set; } // Products.FK_CV2.Products_CV2.ProductTypes_ProductTypeId
        
        public CV2_ProductType()
        {
            CV2_Products = new List<CV2_Product>();
        }
    }

    // ProjectTypes
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class CV2_ProjectType
    {
        public int ProjectTypeId { get; set; } // ProjectTypeId (Primary key)
        public string ProjectTypeName { get; set; } // ProjectTypeName

        // Reverse navigation
        public virtual ICollection<CV2_Product> CV2_Products { get; set; } // Products.FK_CV2.Products_CV2.ProjectTypes_ProjectTypeId
        
        public CV2_ProjectType()
        {
            CV2_Products = new List<CV2_Product>();
        }
    }

    // Requests
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class CV2_Request
    {
        public int RequestId { get; set; } // RequestId (Primary key)
        public string RequestorUserId { get; set; } // RequestorUserId
        public string RequestTitle { get; set; } // RequestTitle
        public string RequestDescription { get; set; } // RequestDescription
        public DateTime CreatedOnDate { get; set; } // CreatedOnDate
        public DateTime DueOnDate { get; set; } // DueOnDate
        public DateTime? CompletedOnDate { get; set; } // CompletedOnDate
        public byte[] RowVersion { get; set; } // RowVersion
        public int RequestTypeId { get; set; } // RequestTypeId
        public int RequestStatusId { get; set; } // RequestStatusId
        public int? WorkQueueId { get; set; } // WorkQueueId

        // Reverse navigation
        public virtual CV2_Product CV2_Product { get; set; } // Products.FK_CV2.Products_CV2.Requests_ProductId
        public virtual ICollection<CV2_RequestHistory> CV2_RequestHistories { get; set; } // RequestHistories.FK_CV2.RequestHistories_CV2.Requests_RequestId

        // Foreign keys
        public virtual CV2_RequestStatu CV2_RequestStatu { get; set; } // FK_CV2.Requests_CV2.RequestStatus_RequestStatusId
        public virtual CV2_RequestType CV2_RequestType { get; set; } // FK_CV2.Requests_CV2.RequestTypes_RequestTypeId
        public virtual CV2_WorkQueue CV2_WorkQueue { get; set; } // FK_CV2.Requests_CV2.WorkQueues_WorkQueueId
        
        public CV2_Request()
        {
            CV2_RequestHistories = new List<CV2_RequestHistory>();
        }
    }

    // RequestHistories
    public class CV2_RequestHistory
    {
        public int RequestHistoryId { get; set; } // RequestHistoryId (Primary key)
        public string RequestHistoryEntry { get; set; } // RequestHistoryEntry
        public DateTime CreatedOnDate { get; set; } // CreatedOnDate
        public int? RequestId { get; set; } // RequestId

        // Foreign keys
        public virtual CV2_Request CV2_Request { get; set; } // FK_CV2.RequestHistories_CV2.Requests_RequestId
    }

    // RequestStatus
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class CV2_RequestStatu
    {
        public int RequestStatusId { get; set; } // RequestStatusId (Primary key)
        public string RequestStatusName { get; set; } // RequestStatusName

        // Reverse navigation
        public virtual ICollection<CV2_Request> CV2_Requests { get; set; } // Requests.FK_CV2.Requests_CV2.RequestStatus_RequestStatusId
        
        public CV2_RequestStatu()
        {
            CV2_Requests = new List<CV2_Request>();
        }
    }

    // RequestTypes
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class CV2_RequestType
    {
        public int RequestTypeId { get; set; } // RequestTypeId (Primary key)
        public string RequestValue { get; set; } // RequestValue
        public string RequestValueHelpText { get; set; } // RequestValueHelpText

        // Reverse navigation
        public virtual ICollection<CV2_Request> CV2_Requests { get; set; } // Requests.FK_CV2.Requests_CV2.RequestTypes_RequestTypeId
        
        public CV2_RequestType()
        {
            CV2_Requests = new List<CV2_Request>();
        }
    }

    // SccmDeploymentDetails
    public class CV2_SccmDeploymentDetail
    {
        public int ProductId { get; set; } // ProductId (Primary key)
        public string SccmContentLocation { get; set; } // SccmContentLocation
        public string SccmInstallCommand { get; set; } // SccmInstallCommand
        public string SccmUninstallCommand { get; set; } // SccmUninstallCommand
        public string SccmDeploymentNotes { get; set; } // SccmDeploymentNotes
        public bool? SccmRebootRequired { get; set; } // SccmRebootRequired
        public string SccmOnDemandGroup { get; set; } // SccmOnDemandGroup

        // Foreign keys
        public virtual CV2_Product CV2_Product { get; set; } // FK_CV2.SccmDeploymentDetails_CV2.Products_ProductId
    }

    // SccmReturnCodes
    public class CV2_SccmReturnCode
    {
        public int SccmReturnCodeId { get; set; } // SccmReturnCodeId (Primary key)
        public int ReturnCode { get; set; } // ReturnCode
        public string ReturnCodeDescription { get; set; } // ReturnCodeDescription
        public int? ProductId { get; set; } // ProductId

        // Foreign keys
        public virtual CV2_Product CV2_Product { get; set; } // FK_cv2.SccmReturnCodes_CV2.Products_ProductId
    }

    // SccmRules
    public class CV2_SccmRule
    {
        public int SccmRuleId { get; set; } // SccmRuleId (Primary key)
        public int SccmRuleType { get; set; } // SccmRuleType
        public int SccmRuleConnector { get; set; } // SccmRuleConnector
        public int SccmRuleOrder { get; set; } // SccmRuleOrder
        public int? ProductId { get; set; } // ProductId
        public string FileOrFolderPath { get; set; } // FileOrFolderPath
        public string FileOrFolderName { get; set; } // FileOrFolderName
        public bool? FileOrFolderAssociate32On64 { get; set; } // FileOrFolderAssociate32On64
        public bool? FileOrFolderMustExist { get; set; } // FileOrFolderMustExist
        public int? FileOrFolderRuleType { get; set; } // FileOrFolderRuleType
        public int? FileOrFolderRuleProperty { get; set; } // FileOrFolderRuleProperty
        public int? FileOrFolderRuleOperator { get; set; } // FileOrFolderRuleOperator
        public string FileOrFolderRuleValue { get; set; } // FileOrFolderRuleValue
        public int? RegistryHive { get; set; } // RegistryHive
        public string RegistryKey { get; set; } // RegistryKey
        public string RegistryValue { get; set; } // RegistryValue
        public bool? UseDefaultValue { get; set; } // UseDefaultValue
        public bool? RegKeyAssociate32On64 { get; set; } // RegKeyAssociate32On64
        public int? RegistryDataType { get; set; } // RegistryDataType
        public bool? RegKeyMustExist { get; set; } // RegKeyMustExist
        public int? RegRuleOperator { get; set; } // RegRuleOperator
        public string RegRuleValue { get; set; } // RegRuleValue
        public string ProductCode { get; set; } // ProductCode
        public bool? MsiProductCodeMustExist { get; set; } // MsiProductCodeMustExist
        public int? MsiRuleProperty { get; set; } // MsiRuleProperty
        public int? MsiRuleOperator { get; set; } // MsiRuleOperator
        public string MsiRuleValue { get; set; } // MsiRuleValue
        public string Discriminator { get; set; } // Discriminator
        public string SccmRuleNote { get; set; } // SccmRuleNote

        // Foreign keys
        public virtual CV2_Product CV2_Product { get; set; } // FK_CV2.SccmRules_CV2.Products_ProductId
    }

    // SoftwarePolicies
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class CV2_SoftwarePolicy
    {
        public int ProductId { get; set; } // ProductId (Primary key)
        public int SoftwarePolicyType { get; set; } // SoftwarePolicyType

        // Reverse navigation
        public virtual ICollection<CV2_SoftwarePolicyGroupAssociation> CV2_SoftwarePolicyGroupAssociations { get; set; } // SoftwarePolicyGroupAssociations.FK_CV2.SoftwarePolicyGroupAssociations_CV2.SoftwarePolicies_ProductId

        // Foreign keys
        public virtual CV2_Product CV2_Product { get; set; } // FK_CV2.SoftwarePolicies_CV2.Products_ProductId
        
        public CV2_SoftwarePolicy()
        {
            CV2_SoftwarePolicyGroupAssociations = new List<CV2_SoftwarePolicyGroupAssociation>();
        }
    }

    // SoftwarePolicyGroupAssociations
    public class CV2_SoftwarePolicyGroupAssociation
    {
        public int SoftwarePolicyGroupAssociationId { get; set; } // SoftwarePolicyGroupAssociationId (Primary key)
        public string SoftwarePolicyAdGroupName { get; set; } // SoftwarePolicyADGroupName
        public string SoftwarePolicyGroupDisplayName { get; set; } // SoftwarePolicyGroupDisplayName
        public string SoftwarePolicyGroupDescription { get; set; } // SoftwarePolicyGroupDescription
        public int? ProductId { get; set; } // ProductId
        public int? SoftwarePolicySupportLevelId { get; set; } // SoftwarePolicySupportLevelId

        // Foreign keys
        public virtual CV2_SoftwarePolicy CV2_SoftwarePolicy { get; set; } // FK_CV2.SoftwarePolicyGroupAssociations_CV2.SoftwarePolicies_ProductId
        public virtual CV2_SoftwarePolicySupportLevel CV2_SoftwarePolicySupportLevel { get; set; } // FK_CV2.SoftwarePolicyGroupAssociations_CV2.SoftwarePolicySupportLevels_SoftwarePolicySupportLevelId
    }

    // SoftwarePolicySupportLevels
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class CV2_SoftwarePolicySupportLevel
    {
        public int SoftwarePolicySupportLevelId { get; set; } // SoftwarePolicySupportLevelId (Primary key)
        public string SoftwarePolicySupportLevelName { get; set; } // SoftwarePolicySupportLevelName

        // Reverse navigation
        public virtual ICollection<CV2_SoftwarePolicyGroupAssociation> CV2_SoftwarePolicyGroupAssociations { get; set; } // SoftwarePolicyGroupAssociations.FK_CV2.SoftwarePolicyGroupAssociations_CV2.SoftwarePolicySupportLevels_SoftwarePolicySupportLevelId
        
        public CV2_SoftwarePolicySupportLevel()
        {
            CV2_SoftwarePolicyGroupAssociations = new List<CV2_SoftwarePolicyGroupAssociation>();
        }
    }

    // SoftwareRequirements
    public class CV2_SoftwareRequirement
    {
        public int ProductId { get; set; } // ProductId (Primary key)
        public string InternetExplorerVersion { get; set; } // InternetExplorerVersion
        public string IisVersion { get; set; } // IISVersion
        public string DotNetVersion { get; set; } // DotNetVersion
        public string AdobeReaderVersion { get; set; } // AdobeReaderVersion
        public string JavaRuntimeVersion { get; set; } // JavaRuntimeVersion
        public string JdkVersion { get; set; } // JDKVersion
        public string DirectXVersion { get; set; } // DirectXVersion
        public string InstalledOfficeApplicationName { get; set; } // InstalledOfficeApplicationName
        public string InstalledOfficeApplicationVersion { get; set; } // InstalledOfficeApplicationVersion
        public string SqlExpressVersion { get; set; } // SQLExpressVersion
        public string SqlCompactVersion { get; set; } // SQLCompactVersion
        public string VstoRuntimeVersion { get; set; } // VSTORuntimeVersion
        public string InstalledOffice2003Pia { get; set; } // InstalledOffice2003PIA
        public string InstalledOffice2007Pia { get; set; } // InstalledOffice2007PIA
        public string InstalledOffice2010Pia { get; set; } // InstalledOffice2010PIA
        public string OfficeSharedInteropAssembly { get; set; } // OfficeSharedInteropAssembly
        public string PowerShellVersion { get; set; } // PowerShellVersion

        // Foreign keys
        public virtual CV2_Product CV2_Product { get; set; } // FK_CV2.SoftwareRequirements_CV2.Products_ProductId
    }

    // SupersededProducts
    public class CV2_SupersededProduct
    {
        public int BaseProductId { get; set; } // BaseProductId (Primary key)
        public int SupersededProductId { get; set; } // SupersededProductId (Primary key)
        public int? ProductProductId { get; set; } // Product_ProductId

        // Foreign keys
        public virtual CV2_Product CV2_Product_BaseProductId { get; set; } // FK_CV2.SupersededProducts_CV2.Products_BaseProductId
        public virtual CV2_Product CV2_Product_ProductProductId { get; set; } // FK_CV2.SupersededProducts_CV2.Products_Product_ProductId
        public virtual CV2_Product CV2_Product_SupersededProductId { get; set; } // FK_CV2.SupersededProducts_CV2.Products_SupersededProductId
    }

    // SystemRequirements
    public class CV2_SystemRequirement
    {
        public int ProductId { get; set; } // ProductId (Primary key)
        public string MinimumWindowsInstallerVersion { get; set; } // MinimumWindowsInstallerVersion
        public string MinimumScreenResolution { get; set; } // MinimumScreenResolution
        public string MinimumPhysicalMemory { get; set; } // MinimumPhysicalMemory
        public string MinimumColorQuality { get; set; } // MinimumColorQuality

        // Foreign keys
        public virtual CV2_Product CV2_Product { get; set; } // FK_CV2.SystemRequirements_CV2.Products_ProductId
    }

    // WorkQueues
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class CV2_WorkQueue
    {
        public int WorkQueueId { get; set; } // WorkQueueId (Primary key)
        public DateTime CreatedOnDate { get; set; } // CreatedOnDate
        public byte[] RowVersion { get; set; } // RowVersion

        // Reverse navigation
        public virtual ICollection<CV2_ApplicationUser> CV2_ApplicationUsers { get; set; } // ApplicationUsers.FK_CV2.ApplicationUsers_CV2.WorkQueues_WorkQueueId
        public virtual ICollection<CV2_Request> CV2_Requests { get; set; } // Requests.FK_CV2.Requests_CV2.WorkQueues_WorkQueueId
        
        public CV2_WorkQueue()
        {
            CV2_ApplicationUsers = new List<CV2_ApplicationUser>();
            CV2_Requests = new List<CV2_Request>();
        }
    }

    // __nhydrateobjects
    public class Nhydrateobject
    {
        public long Rowid { get; set; } // rowid
        public Guid? Id { get; set; } // id
        public string Name { get; set; } // name
        public string Type { get; set; } // type
        public string Schema { get; set; } // schema
        public DateTime CreatedDate { get; set; } // CreatedDate
        public DateTime ModifiedDate { get; set; } // ModifiedDate
        public string Hash { get; set; } // Hash
        public string Status { get; set; } // Status
        public Guid ModelKey { get; set; } // ModelKey
    }

    // __nhydrateschema
    public class Nhydrateschema
    {
        public string DbVersion { get; set; } // dbVersion
        public DateTime LastUpdate { get; set; } // LastUpdate
        public Guid ModelKey { get; set; } // ModelKey (Primary key)
        public string History { get; set; } // History
    }

    // PackagesToAdd
    public class PackagesToAdd
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name
        public int? ConfigurationRecordsId { get; set; } // ConfigurationRecordsId

        // Foreign keys
        public virtual ConfigurationRecord ConfigurationRecord { get; set; } // FK_ConfigurationRecordsPackagesToAdd
    }

    // PackagesToDelete
    public class PackagesToDelete
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name
        public int? ConfigurationRecordsId { get; set; } // ConfigurationRecordsId

        // Foreign keys
        public virtual ConfigurationRecord ConfigurationRecord { get; set; } // FK_ConfigurationRecordsPackagesToDelete
    }

    // ProductSummaryView
    public class ProductSummaryView
    {
        public int ProductId { get; set; } // ProductId
        public int? LegacyId { get; set; } // LegacyId
        public string ProductName { get; set; } // ProductName
        public string ProductVersion { get; set; } // ProductVersion
        public string ProductManufacturer { get; set; } // ProductManufacturer
        public int ProductStatus { get; set; } // ProductStatus
        public string ProductDescription { get; set; } // ProductDescription
        public string ProductContactRoleName { get; set; } // ProductContactRoleName
        public int ProductDslId { get; set; } // ProductDslId
        public int ProductCosmicId { get; set; } // ProductCosmicId
        public string RequestTitle { get; set; } // RequestTitle
        public string ProductContactName { get; set; } // ProductContactName
        public int RequestId { get; set; } // RequestId
    }

    // SoftwareExceptions
    public class SoftwareException
    {
        public int Id { get; set; } // Id (Primary key)
        public string WorkstationName { get; set; } // WorkstationName
        public string SourcePackageName { get; set; } // SourcePackageName
        public string DestinationPackageName { get; set; } // DestinationPackageName
        public byte[] PrePostProcessFlag { get; set; } // PrePostProcessFlag
        public int? ConfigurationRecordsId { get; set; } // ConfigurationRecordsId

        // Foreign keys
        public virtual ConfigurationRecord ConfigurationRecord { get; set; } // FK_ConfigurationRecordsSoftwareExceptions
    }


    // ************************************************************************
    // POCO Configuration

    // ConfigurationRecords
    public class ConfigurationRecordConfiguration : EntityTypeConfiguration<ConfigurationRecord>
    {
        public ConfigurationRecordConfiguration()
            : this("dbo")
        {
        }
 
        public ConfigurationRecordConfiguration(string schema)
        {
            ToTable(schema + ".ConfigurationRecords");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName("Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar");
            Property(x => x.Description).HasColumnName("Description").IsRequired().HasColumnType("nvarchar");
            Property(x => x.Status).HasColumnName("Status").IsRequired().HasColumnType("nvarchar");
            Property(x => x.AutoImage).HasColumnName("AutoImage").IsRequired().HasColumnType("nvarchar");
            Property(x => x.AssignedImage).HasColumnName("AssignedImage").IsRequired().HasColumnType("nvarchar");
            Property(x => x.InstallBaseApps).HasColumnName("InstallBaseApps").IsRequired().HasColumnType("bit");
            Property(x => x.Key).HasColumnName("Key").IsRequired().HasColumnType("nvarchar");
            Property(x => x.Ou).HasColumnName("OU").IsRequired().HasColumnType("nvarchar");
        }
    }

    // ApplicationPermissions
    public class CV2_ApplicationPermissionConfiguration : EntityTypeConfiguration<CV2_ApplicationPermission>
    {
        public CV2_ApplicationPermissionConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_ApplicationPermissionConfiguration(string schema)
        {
            ToTable(schema + ".ApplicationPermissions");
            HasKey(x => x.ApplicationPermissionId);

            Property(x => x.ApplicationPermissionId).HasColumnName("ApplicationPermissionId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Approve).HasColumnName("Approve").IsRequired().HasColumnType("bit");
            Property(x => x.UserAdmin).HasColumnName("UserAdmin").IsRequired().HasColumnType("bit");
            Property(x => x.ApplicationRoleId).HasColumnName("ApplicationRoleId").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.CV2_ApplicationRole).WithMany(b => b.CV2_ApplicationPermissions).HasForeignKey(c => c.ApplicationRoleId); // FK_CV2.ApplicationPermissions_CV2.ApplicationRoles_ApplicationRoleId
        }
    }

    // ApplicationRoles
    public class CV2_ApplicationRoleConfiguration : EntityTypeConfiguration<CV2_ApplicationRole>
    {
        public CV2_ApplicationRoleConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_ApplicationRoleConfiguration(string schema)
        {
            ToTable(schema + ".ApplicationRoles");
            HasKey(x => x.ApplicationRoleId);

            Property(x => x.ApplicationRoleId).HasColumnName("ApplicationRoleId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ApplicationRoleName).HasColumnName("ApplicationRoleName").IsRequired().HasColumnType("nvarchar");
            Property(x => x.ApplicationRoleDescription).HasColumnName("ApplicationRoleDescription").IsRequired().HasColumnType("nvarchar");
            Property(x => x.CreatedOnDate).HasColumnName("CreatedOnDate").IsRequired().HasColumnType("datetime");
            Property(x => x.RowVersion).HasColumnName("RowVersion").IsRequired().IsFixedLength().HasColumnType("timestamp").HasMaxLength(8).IsRowVersion().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);
        }
    }

    // ApplicationUsers
    public class CV2_ApplicationUserConfiguration : EntityTypeConfiguration<CV2_ApplicationUser>
    {
        public CV2_ApplicationUserConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_ApplicationUserConfiguration(string schema)
        {
            ToTable(schema + ".ApplicationUsers");
            HasKey(x => x.ApplicationUserId);

            Property(x => x.ApplicationUserId).HasColumnName("ApplicationUserId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ApplicationUserLoginId).HasColumnName("ApplicationUserLoginId").IsRequired().HasColumnType("nvarchar");
            Property(x => x.ApplicationUserName).HasColumnName("ApplicationUserName").IsRequired().HasColumnType("nvarchar");
            Property(x => x.ApplicationUserEmail).HasColumnName("ApplicationUserEmail").IsRequired().HasColumnType("nvarchar");
            Property(x => x.ApplicationUserPhoneNumber).HasColumnName("ApplicationUserPhoneNumber").IsRequired().HasColumnType("nvarchar");
            Property(x => x.ApplicationRoleId).HasColumnName("ApplicationRoleId").IsRequired().HasColumnType("int");
            Property(x => x.CreatedOnDate).HasColumnName("CreatedOnDate").IsRequired().HasColumnType("datetime");
            Property(x => x.RowVersion).HasColumnName("RowVersion").IsRequired().IsFixedLength().HasColumnType("timestamp").HasMaxLength(8).IsRowVersion().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);
            Property(x => x.WorkQueueId).HasColumnName("WorkQueueId").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.CV2_ApplicationRole).WithMany(b => b.CV2_ApplicationUsers).HasForeignKey(c => c.ApplicationRoleId); // FK_CV2.ApplicationUsers_CV2.ApplicationRoles_ApplicationRoleId
            HasRequired(a => a.CV2_WorkQueue).WithMany(b => b.CV2_ApplicationUsers).HasForeignKey(c => c.WorkQueueId); // FK_CV2.ApplicationUsers_CV2.WorkQueues_WorkQueueId
        }
    }

    // Attachments
    public class CV2_AttachmentConfiguration : EntityTypeConfiguration<CV2_Attachment>
    {
        public CV2_AttachmentConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_AttachmentConfiguration(string schema)
        {
            ToTable(schema + ".Attachments");
            HasKey(x => x.AttachementId);

            Property(x => x.AttachementId).HasColumnName("AttachementId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.AttachmentName).HasColumnName("AttachmentName").IsRequired().HasColumnType("nvarchar");
            Property(x => x.AttachmentContents).HasColumnName("AttachmentContents").IsRequired().HasColumnType("varbinary");
            Property(x => x.AttachmentExtension).HasColumnName("AttachmentExtension").IsRequired().HasColumnType("nvarchar");
            Property(x => x.RowVersion).HasColumnName("RowVersion").IsRequired().IsFixedLength().HasColumnType("timestamp").HasMaxLength(8).IsRowVersion().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);
            Property(x => x.DocumentId).HasColumnName("DocumentId").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.CV2_Document).WithMany(b => b.CV2_Attachments).HasForeignKey(c => c.DocumentId); // FK_CV2.Attachments_CV2.Documents_DocumentId
        }
    }

    // CosmicConfigRecords
    public class CV2_CosmicConfigRecordConfiguration : EntityTypeConfiguration<CV2_CosmicConfigRecord>
    {
        public CV2_CosmicConfigRecordConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_CosmicConfigRecordConfiguration(string schema)
        {
            ToTable(schema + ".CosmicConfigRecords");
            HasKey(x => x.CosmicConfigRecordId);

            Property(x => x.CosmicConfigRecordId).HasColumnName("CosmicConfigRecordId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.CosmicConfigRecordName).HasColumnName("CosmicConfigRecordName").IsRequired().HasColumnType("nvarchar");
            Property(x => x.CosmicConfigRecordCreatedBy).HasColumnName("CosmicConfigRecordCreatedBy").IsRequired().HasColumnType("nvarchar");
        }
    }

    // Dependencies
    public class CV2_DependencyConfiguration : EntityTypeConfiguration<CV2_Dependency>
    {
        public CV2_DependencyConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_DependencyConfiguration(string schema)
        {
            ToTable(schema + ".Dependencies");
            HasKey(x => new { x.BaseProductId, x.DependencyProductId });

            Property(x => x.BaseProductId).HasColumnName("BaseProductId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.DependencyProductId).HasColumnName("DependencyProductId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.InstallOrder).HasColumnName("InstallOrder").IsRequired().HasColumnType("int");
            Property(x => x.DependencyType).HasColumnName("DependencyType").IsRequired().HasColumnType("int");
            Property(x => x.ProductProductId).HasColumnName("Product_ProductId").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.CV2_Product_ProductProductId).WithMany(b => b.CV2_Dependencies_ProductProductId).HasForeignKey(c => c.ProductProductId); // FK_CV2.Dependencies_CV2.Products_Product_ProductId
            HasRequired(a => a.CV2_Product_BaseProductId).WithMany(b => b.CV2_Dependencies_BaseProductId).HasForeignKey(c => c.BaseProductId); // FK_CV2.Dependencies_CV2.Products_BaseProductId
            HasRequired(a => a.CV2_Product_DependencyProductId).WithMany(b => b.CV2_Dependencies_DependencyProductId).HasForeignKey(c => c.DependencyProductId); // FK_CV2.Dependencies_CV2.Products_DependencyProductId
        }
    }

    // DistributionLocations
    public class CV2_DistributionLocationConfiguration : EntityTypeConfiguration<CV2_DistributionLocation>
    {
        public CV2_DistributionLocationConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_DistributionLocationConfiguration(string schema)
        {
            ToTable(schema + ".DistributionLocations");
            HasKey(x => x.DistributionLocationId);

            Property(x => x.DistributionLocationId).HasColumnName("DistributionLocationId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.DistributionPath).HasColumnName("DistributionPath").IsRequired().HasColumnType("nvarchar");
            Property(x => x.DistributionMethod).HasColumnName("DistributionMethod").IsRequired().HasColumnType("int");
            Property(x => x.ProductId).HasColumnName("ProductId").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.CV2_Product).WithMany(b => b.CV2_DistributionLocations).HasForeignKey(c => c.ProductId); // FK_CV2.DistributionLocations_CV2.Products_ProductId
        }
    }

    // Documents
    public class CV2_DocumentConfiguration : EntityTypeConfiguration<CV2_Document>
    {
        public CV2_DocumentConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_DocumentConfiguration(string schema)
        {
            ToTable(schema + ".Documents");
            HasKey(x => x.DocumentId);

            Property(x => x.DocumentId).HasColumnName("DocumentId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.DocumentTitle).HasColumnName("DocumentTitle").IsRequired().HasColumnType("nvarchar");
            Property(x => x.DocumentType).HasColumnName("DocumentType").IsRequired().HasColumnType("int");
            Property(x => x.DocumentContents).HasColumnName("DocumentContents").IsRequired().HasColumnType("varbinary");
            Property(x => x.DocumentExtension).HasColumnName("DocumentExtension").IsRequired().HasColumnType("nvarchar");
            Property(x => x.DocumentCreatedBy).HasColumnName("DocumentCreatedBy").IsRequired().HasColumnType("nvarchar");
            Property(x => x.DocumentCreatedOn).HasColumnName("DocumentCreatedOn").IsRequired().HasColumnType("datetime");
            Property(x => x.RowVersion).HasColumnName("RowVersion").IsRequired().IsFixedLength().HasColumnType("timestamp").HasMaxLength(8).IsRowVersion().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);
            Property(x => x.ProductId).HasColumnName("ProductId").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.CV2_Product).WithMany(b => b.CV2_Documents).HasForeignKey(c => c.ProductId); // FK_CV2.Documents_CV2.Products_ProductId
            HasMany(t => t.CV2_KeyWords).WithMany(t => t.CV2_Documents).Map(m => 
            {
                m.ToTable("KeyWordDocuments", "dbo");
                m.MapLeftKey("Document_DocumentId");
                m.MapRightKey("KeyWord_KeyWordId");
            });
        }
    }

    // InstallDetails
    public class CV2_InstallDetailConfiguration : EntityTypeConfiguration<CV2_InstallDetail>
    {
        public CV2_InstallDetailConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_InstallDetailConfiguration(string schema)
        {
            ToTable(schema + ".InstallDetails");
            HasKey(x => x.ProductId);

            Property(x => x.ProductId).HasColumnName("ProductId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.InstallDetailFileName).HasColumnName("InstallDetailFileName").IsOptional().HasColumnType("nvarchar");
            Property(x => x.InstallDetailTransformFileName).HasColumnName("InstallDetailTransformFileName").IsOptional().HasColumnType("nvarchar");
            Property(x => x.InstallDetailFileSize).HasColumnName("InstallDetailFileSize").IsRequired().HasColumnType("bigint");
            Property(x => x.InstallDetailRebootRequired).HasColumnName("InstallDetailRebootRequired").IsRequired().HasColumnType("bit");
            Property(x => x.InstallDetailInstallCommand).HasColumnName("InstallDetailInstallCommand").IsOptional().HasColumnType("nvarchar");
            Property(x => x.InstallDetailUninstallCommand).HasColumnName("InstallDetailUninstallCommand").IsOptional().HasColumnType("nvarchar");
            Property(x => x.InstallDetailSourceLocation).HasColumnName("InstallDetailSourceLocation").IsOptional().HasColumnType("nvarchar");

            // Foreign keys
            HasRequired(a => a.CV2_Product).WithOptional(b => b.CV2_InstallDetail); // FK_CV2.InstallDetails_CV2.Products_ProductId
        }
    }

    // JournalEntries
    public class CV2_JournalEntryConfiguration : EntityTypeConfiguration<CV2_JournalEntry>
    {
        public CV2_JournalEntryConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_JournalEntryConfiguration(string schema)
        {
            ToTable(schema + ".JournalEntries");
            HasKey(x => x.JournalEntryId);

            Property(x => x.JournalEntryId).HasColumnName("JournalEntryId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.JournalEntryType).HasColumnName("JournalEntryType").IsRequired().HasColumnType("int");
            Property(x => x.JournalEntryText).HasColumnName("JournalEntryText").IsRequired().HasColumnType("nvarchar");
            Property(x => x.JournalEntryCreatedBy).HasColumnName("JournalEntryCreatedBy").IsRequired().HasColumnType("nvarchar");
            Property(x => x.JournalEntryCreatedOn).HasColumnName("JournalEntryCreatedOn").IsRequired().HasColumnType("datetime");
            Property(x => x.RowVersion).HasColumnName("RowVersion").IsRequired().IsFixedLength().HasColumnType("timestamp").HasMaxLength(8).IsRowVersion().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);
            Property(x => x.ProductId).HasColumnName("ProductId").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.CV2_Product).WithMany(b => b.CV2_JournalEntries).HasForeignKey(c => c.ProductId); // FK_CV2.JournalEntries_CV2.Products_ProductId
        }
    }

    // KeyWords
    public class CV2_KeyWordConfiguration : EntityTypeConfiguration<CV2_KeyWord>
    {
        public CV2_KeyWordConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_KeyWordConfiguration(string schema)
        {
            ToTable(schema + ".KeyWords");
            HasKey(x => x.KeyWordId);

            Property(x => x.KeyWordId).HasColumnName("KeyWordId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Word).HasColumnName("Word").IsRequired().HasColumnType("nvarchar");
        }
    }

    // Licenses
    public class CV2_LicenseConfiguration : EntityTypeConfiguration<CV2_License>
    {
        public CV2_LicenseConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_LicenseConfiguration(string schema)
        {
            ToTable(schema + ".Licenses");
            HasKey(x => x.LicenseId);

            Property(x => x.LicenseId).HasColumnName("LicenseId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.LicenseSku).HasColumnName("LicenseSku").IsOptional().HasColumnType("nvarchar");
            Property(x => x.LicenseNotes).HasColumnName("LicenseNotes").IsOptional().HasColumnType("nvarchar");
            Property(x => x.LicenseOwner).HasColumnName("LicenseOwner").IsOptional().HasColumnType("nvarchar");
            Property(x => x.LicenseTypeId).HasColumnName("LicenseTypeId").IsOptional().HasColumnType("int");
            Property(x => x.ProductId).HasColumnName("ProductId").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.CV2_LicenseType).WithMany(b => b.CV2_Licenses).HasForeignKey(c => c.LicenseTypeId); // FK_CV2.Licenses_CV2.LicenseTypes_LicenseTypeId
            HasOptional(a => a.CV2_Product).WithMany(b => b.CV2_Licenses).HasForeignKey(c => c.ProductId); // FK_CV2.Licenses_CV2.Products_ProductId
        }
    }

    // LicenseKeys
    public class CV2_LicenseKeyConfiguration : EntityTypeConfiguration<CV2_LicenseKey>
    {
        public CV2_LicenseKeyConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_LicenseKeyConfiguration(string schema)
        {
            ToTable(schema + ".LicenseKeys");
            HasKey(x => x.LicenseKeyId);

            Property(x => x.LicenseKeyId).HasColumnName("LicenseKeyId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.LicenseKeyData).HasColumnName("LicenseKeyData").IsRequired().HasColumnType("nvarchar");
            Property(x => x.LicenseKeyOwnerName).HasColumnName("LicenseKeyOwnerName").IsRequired().HasColumnType("nvarchar");
            Property(x => x.LicenseKeyOwnerEmail).HasColumnName("LicenseKeyOwnerEmail").IsOptional().HasColumnType("nvarchar");
            Property(x => x.LicenseKeyOwnerPhoneNumber).HasColumnName("LicenseKeyOwnerPhoneNumber").IsOptional().HasColumnType("nvarchar");
            Property(x => x.LicenseId).HasColumnName("LicenseId").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.CV2_License).WithMany(b => b.CV2_LicenseKeys).HasForeignKey(c => c.LicenseId); // FK_CV2.LicenseKeys_CV2.Licenses_LicenseId
        }
    }

    // LicenseTypes
    public class CV2_LicenseTypeConfiguration : EntityTypeConfiguration<CV2_LicenseType>
    {
        public CV2_LicenseTypeConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_LicenseTypeConfiguration(string schema)
        {
            ToTable(schema + ".LicenseTypes");
            HasKey(x => x.LicenseTypeId);

            Property(x => x.LicenseTypeId).HasColumnName("LicenseTypeId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.LicenseTypeName).HasColumnName("LicenseTypeName").IsRequired().HasColumnType("nvarchar");
        }
    }

    // LocalAccountVerifications
    public class CV2_LocalAccountVerificationConfiguration : EntityTypeConfiguration<CV2_LocalAccountVerification>
    {
        public CV2_LocalAccountVerificationConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_LocalAccountVerificationConfiguration(string schema)
        {
            ToTable(schema + ".LocalAccountVerifications");
            HasKey(x => x.ProductId);

            Property(x => x.ProductId).HasColumnName("ProductId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.LocalAdminVerificationComplete).HasColumnName("LocalAdminVerificationComplete").IsRequired().HasColumnType("bit");
            Property(x => x.WorksWithLocalAdminAccount).HasColumnName("WorksWithLocalAdminAccount").IsRequired().HasColumnType("bit");

            // Foreign keys
            HasRequired(a => a.CV2_Product).WithOptional(b => b.CV2_LocalAccountVerification); // FK_CV2.LocalAccountVerifications_CV2.Products_ProductId
        }
    }

    // OsRequirements
    public class CV2_OsRequirementConfiguration : EntityTypeConfiguration<CV2_OsRequirement>
    {
        public CV2_OsRequirementConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_OsRequirementConfiguration(string schema)
        {
            ToTable(schema + ".OsRequirements");
            HasKey(x => x.ProductId);

            Property(x => x.ProductId).HasColumnName("ProductId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.WindowsXp32Bit).HasColumnName("WindowsXP_32Bit").IsRequired().HasColumnType("bit");
            Property(x => x.WindowsVista32Bit).HasColumnName("WindowsVista_32Bit").IsRequired().HasColumnType("bit");
            Property(x => x.Windows732Bit).HasColumnName("Windows7_32Bit").IsRequired().HasColumnType("bit");
            Property(x => x.Windows832Bit).HasColumnName("Windows8_32Bit").IsRequired().HasColumnType("bit");
            Property(x => x.Windows8132Bit).HasColumnName("Windows81_32Bit").IsRequired().HasColumnType("bit");
            Property(x => x.WindowsXp64Bit).HasColumnName("WindowsXP_64Bit").IsRequired().HasColumnType("bit");
            Property(x => x.WindowsVista64Bit).HasColumnName("WindowsVista_64Bit").IsRequired().HasColumnType("bit");
            Property(x => x.Windows764Bit).HasColumnName("Windows7_64Bit").IsRequired().HasColumnType("bit");
            Property(x => x.Windows864Bit).HasColumnName("Windows8_64Bit").IsRequired().HasColumnType("bit");
            Property(x => x.Windows8164Bit).HasColumnName("Windows81_64Bit").IsRequired().HasColumnType("bit");
            Property(x => x.Windows1032Bit).HasColumnName("Windows10_32Bit").IsRequired().HasColumnType("bit");
            Property(x => x.Windows1064Bit).HasColumnName("Windows10_64Bit").IsRequired().HasColumnType("bit");

            // Foreign keys
            HasRequired(a => a.CV2_Product).WithOptional(b => b.CV2_OsRequirement); // FK_CV2.OsRequirements_CV2.Products_ProductId
        }
    }

    // Products
    public class CV2_ProductConfiguration : EntityTypeConfiguration<CV2_Product>
    {
        public CV2_ProductConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_ProductConfiguration(string schema)
        {
            ToTable(schema + ".Products");
            HasKey(x => x.ProductId);

            Property(x => x.ProductId).HasColumnName("ProductId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ProductName).HasColumnName("ProductName").IsRequired().HasColumnType("nvarchar");
            Property(x => x.ProductVersion).HasColumnName("ProductVersion").IsRequired().HasColumnType("nvarchar");
            Property(x => x.ProductManufacturer).HasColumnName("ProductManufacturer").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ProductDescription).HasColumnName("ProductDescription").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ProductIsDigitallySigned).HasColumnName("ProductIsDigitallySigned").IsRequired().HasColumnType("bit");
            Property(x => x.ProductCode).HasColumnName("ProductCode").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ProductUpgradeCode).HasColumnName("ProductUpgradeCode").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ProductDslId).HasColumnName("ProductDslId").IsRequired().HasColumnType("int");
            Property(x => x.ProductCosmicId).HasColumnName("ProductCosmicId").IsRequired().HasColumnType("int");
            Property(x => x.ProductCosmicMsiGuid).HasColumnName("ProductCosmicMsiGuid").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ProductStatus).HasColumnName("ProductStatus").IsRequired().HasColumnType("int");
            Property(x => x.CreatedOnDate).HasColumnName("CreatedOnDate").IsRequired().HasColumnType("datetime");
            Property(x => x.RowVersion).HasColumnName("RowVersion").IsRequired().IsFixedLength().HasColumnType("timestamp").HasMaxLength(8).IsRowVersion().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);
            Property(x => x.LegacyId).HasColumnName("LegacyId").IsOptional().HasColumnType("int");
            Property(x => x.ProductCategoryId).HasColumnName("ProductCategoryId").IsOptional().HasColumnType("int");
            Property(x => x.ProductTypeId).HasColumnName("ProductTypeId").IsOptional().HasColumnType("int");
            Property(x => x.ProjectTypeId).HasColumnName("ProjectTypeId").IsOptional().HasColumnType("int");
            Property(x => x.CosmicConfigRecordId).HasColumnName("CosmicConfigRecordId").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.CV2_CosmicConfigRecord).WithMany(b => b.CV2_Products).HasForeignKey(c => c.CosmicConfigRecordId); // FK_CV2.Products_CV2.CosmicConfigRecords_CosmicConfigRecordId
            HasOptional(a => a.CV2_ProductCategory).WithMany(b => b.CV2_Products).HasForeignKey(c => c.ProductCategoryId); // FK_CV2.Products_CV2.ProductCategories_ProductCategoryId
            HasOptional(a => a.CV2_ProductType).WithMany(b => b.CV2_Products).HasForeignKey(c => c.ProductTypeId); // FK_CV2.Products_CV2.ProductTypes_ProductTypeId
            HasOptional(a => a.CV2_ProjectType).WithMany(b => b.CV2_Products).HasForeignKey(c => c.ProjectTypeId); // FK_CV2.Products_CV2.ProjectTypes_ProjectTypeId
            HasRequired(a => a.CV2_Request).WithOptional(b => b.CV2_Product); // FK_CV2.Products_CV2.Requests_ProductId
            HasMany(t => t.CV2_ProductKeyWords).WithMany(t => t.CV2_Products).Map(m => 
            {
                m.ToTable("ProductKeyWordProducts", "dbo");
                m.MapLeftKey("Product_ProductId");
                m.MapRightKey("ProductKeyWord_ProductKeyWordId");
            });
        }
    }

    // ProductCategories
    public class CV2_ProductCategoryConfiguration : EntityTypeConfiguration<CV2_ProductCategory>
    {
        public CV2_ProductCategoryConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_ProductCategoryConfiguration(string schema)
        {
            ToTable(schema + ".ProductCategories");
            HasKey(x => x.ProductCategoryId);

            Property(x => x.ProductCategoryId).HasColumnName("ProductCategoryId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ProductCategoryName).HasColumnName("ProductCategoryName").IsRequired().HasColumnType("nvarchar");
        }
    }

    // ProductContacts
    public class CV2_ProductContactConfiguration : EntityTypeConfiguration<CV2_ProductContact>
    {
        public CV2_ProductContactConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_ProductContactConfiguration(string schema)
        {
            ToTable(schema + ".ProductContacts");
            HasKey(x => x.ProductContactId);

            Property(x => x.ProductContactId).HasColumnName("ProductContactId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ProductContactLoginId).HasColumnName("ProductContactLoginId").IsRequired().HasColumnType("nvarchar");
            Property(x => x.ProductContactName).HasColumnName("ProductContactName").IsRequired().HasColumnType("nvarchar");
            Property(x => x.ProductContactEmail).HasColumnName("ProductContactEmail").IsRequired().HasColumnType("nvarchar");
            Property(x => x.ProductContactPhoneNumber).HasColumnName("ProductContactPhoneNumber").IsRequired().HasColumnType("nvarchar");
            Property(x => x.ProductContactRoleId).HasColumnName("ProductContactRoleId").IsRequired().HasColumnType("int");
            Property(x => x.ProductId).HasColumnName("ProductId").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.CV2_Product).WithMany(b => b.CV2_ProductContacts).HasForeignKey(c => c.ProductId); // FK_CV2.ProductContacts_CV2.Products_ProductId
            HasRequired(a => a.CV2_ProductContactRole).WithMany(b => b.CV2_ProductContacts).HasForeignKey(c => c.ProductContactRoleId); // FK_CV2.ProductContacts_CV2.ProductContactRoles_ProductContactRoleId
        }
    }

    // ProductContactRoles
    public class CV2_ProductContactRoleConfiguration : EntityTypeConfiguration<CV2_ProductContactRole>
    {
        public CV2_ProductContactRoleConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_ProductContactRoleConfiguration(string schema)
        {
            ToTable(schema + ".ProductContactRoles");
            HasKey(x => x.ProductContactRoleId);

            Property(x => x.ProductContactRoleId).HasColumnName("ProductContactRoleId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ProductContactRoleName).HasColumnName("ProductContactRoleName").IsRequired().HasColumnType("nvarchar");
        }
    }

    // ProductKeyWords
    public class CV2_ProductKeyWordConfiguration : EntityTypeConfiguration<CV2_ProductKeyWord>
    {
        public CV2_ProductKeyWordConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_ProductKeyWordConfiguration(string schema)
        {
            ToTable(schema + ".ProductKeyWords");
            HasKey(x => x.ProductKeyWordId);

            Property(x => x.ProductKeyWordId).HasColumnName("ProductKeyWordId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Word).HasColumnName("Word").IsRequired().HasColumnType("nvarchar");
        }
    }

    // ProductPermissions
    public class CV2_ProductPermissionConfiguration : EntityTypeConfiguration<CV2_ProductPermission>
    {
        public CV2_ProductPermissionConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_ProductPermissionConfiguration(string schema)
        {
            ToTable(schema + ".ProductPermissions");
            HasKey(x => x.ProductId);

            Property(x => x.ProductId).HasColumnName("ProductId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ElevatedRightsRequired).HasColumnName("ElevatedRightsRequired").IsRequired().HasColumnType("bit");
            Property(x => x.RequiresAdminRightsBasic).HasColumnName("RequiresAdminRightsBasic").IsRequired().HasColumnType("bit");
            Property(x => x.RequiresAdminRightsAdvanced).HasColumnName("RequiresAdminRightsAdvanced").IsRequired().HasColumnType("bit");
            Property(x => x.RequiresAdminRightsUpdates).HasColumnName("RequiresAdminRightsUpdates").IsRequired().HasColumnType("bit");

            // Foreign keys
            HasRequired(a => a.CV2_Product).WithOptional(b => b.CV2_ProductPermission); // FK_CV2.ProductPermissions_CV2.Products_ProductId
        }
    }

    // ProductPermissionDetails
    public class CV2_ProductPermissionDetailConfiguration : EntityTypeConfiguration<CV2_ProductPermissionDetail>
    {
        public CV2_ProductPermissionDetailConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_ProductPermissionDetailConfiguration(string schema)
        {
            ToTable(schema + ".ProductPermissionDetails");
            HasKey(x => x.ProductPermissionDetailId);

            Property(x => x.ProductPermissionDetailId).HasColumnName("ProductPermissionDetailId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ProductPermissionDetailAcl).HasColumnName("ProductPermissionDetailAcl").IsRequired().HasColumnType("int");
            Property(x => x.ProductPermissionDetailType).HasColumnName("ProductPermissionDetailType").IsRequired().HasColumnType("int");
            Property(x => x.ProductPermissionLocation).HasColumnName("ProductPermissionLocation").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ProductPermissionGroupOrUserName).HasColumnName("ProductPermissionGroupOrUserName").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ProductId).HasColumnName("ProductId").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.CV2_Product).WithMany(b => b.CV2_ProductPermissionDetails).HasForeignKey(c => c.ProductId); // FK_CV2.ProductPermissionDetails_CV2.Products_ProductId
        }
    }

    // ProductTypes
    public class CV2_ProductTypeConfiguration : EntityTypeConfiguration<CV2_ProductType>
    {
        public CV2_ProductTypeConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_ProductTypeConfiguration(string schema)
        {
            ToTable(schema + ".ProductTypes");
            HasKey(x => x.ProductTypeId);

            Property(x => x.ProductTypeId).HasColumnName("ProductTypeId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ProductTypeName).HasColumnName("ProductTypeName").IsRequired().HasColumnType("nvarchar");
        }
    }

    // ProjectTypes
    public class CV2_ProjectTypeConfiguration : EntityTypeConfiguration<CV2_ProjectType>
    {
        public CV2_ProjectTypeConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_ProjectTypeConfiguration(string schema)
        {
            ToTable(schema + ".ProjectTypes");
            HasKey(x => x.ProjectTypeId);

            Property(x => x.ProjectTypeId).HasColumnName("ProjectTypeId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ProjectTypeName).HasColumnName("ProjectTypeName").IsRequired().HasColumnType("nvarchar");
        }
    }

    // Requests
    public class CV2_RequestConfiguration : EntityTypeConfiguration<CV2_Request>
    {
        public CV2_RequestConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_RequestConfiguration(string schema)
        {
            ToTable(schema + ".Requests");
            HasKey(x => x.RequestId);

            Property(x => x.RequestId).HasColumnName("RequestId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.RequestorUserId).HasColumnName("RequestorUserId").IsRequired().HasColumnType("nvarchar");
            Property(x => x.RequestTitle).HasColumnName("RequestTitle").IsRequired().HasColumnType("nvarchar");
            Property(x => x.RequestDescription).HasColumnName("RequestDescription").IsRequired().HasColumnType("nvarchar");
            Property(x => x.CreatedOnDate).HasColumnName("CreatedOnDate").IsRequired().HasColumnType("datetime");
            Property(x => x.DueOnDate).HasColumnName("DueOnDate").IsRequired().HasColumnType("datetime");
            Property(x => x.CompletedOnDate).HasColumnName("CompletedOnDate").IsOptional().HasColumnType("datetime");
            Property(x => x.RowVersion).HasColumnName("RowVersion").IsRequired().IsFixedLength().HasColumnType("timestamp").HasMaxLength(8).IsRowVersion().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);
            Property(x => x.RequestTypeId).HasColumnName("RequestTypeId").IsRequired().HasColumnType("int");
            Property(x => x.RequestStatusId).HasColumnName("RequestStatusId").IsRequired().HasColumnType("int");
            Property(x => x.WorkQueueId).HasColumnName("WorkQueueId").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.CV2_WorkQueue).WithMany(b => b.CV2_Requests).HasForeignKey(c => c.WorkQueueId); // FK_CV2.Requests_CV2.WorkQueues_WorkQueueId
            HasRequired(a => a.CV2_RequestStatu).WithMany(b => b.CV2_Requests).HasForeignKey(c => c.RequestStatusId); // FK_CV2.Requests_CV2.RequestStatus_RequestStatusId
            HasRequired(a => a.CV2_RequestType).WithMany(b => b.CV2_Requests).HasForeignKey(c => c.RequestTypeId); // FK_CV2.Requests_CV2.RequestTypes_RequestTypeId
        }
    }

    // RequestHistories
    public class CV2_RequestHistoryConfiguration : EntityTypeConfiguration<CV2_RequestHistory>
    {
        public CV2_RequestHistoryConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_RequestHistoryConfiguration(string schema)
        {
            ToTable(schema + ".RequestHistories");
            HasKey(x => x.RequestHistoryId);

            Property(x => x.RequestHistoryId).HasColumnName("RequestHistoryId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.RequestHistoryEntry).HasColumnName("RequestHistoryEntry").IsRequired().HasColumnType("nvarchar");
            Property(x => x.CreatedOnDate).HasColumnName("CreatedOnDate").IsRequired().HasColumnType("datetime");
            Property(x => x.RequestId).HasColumnName("RequestId").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.CV2_Request).WithMany(b => b.CV2_RequestHistories).HasForeignKey(c => c.RequestId); // FK_CV2.RequestHistories_CV2.Requests_RequestId
        }
    }

    // RequestStatus
    public class CV2_RequestStatuConfiguration : EntityTypeConfiguration<CV2_RequestStatu>
    {
        public CV2_RequestStatuConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_RequestStatuConfiguration(string schema)
        {
            ToTable(schema + ".RequestStatus");
            HasKey(x => x.RequestStatusId);

            Property(x => x.RequestStatusId).HasColumnName("RequestStatusId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.RequestStatusName).HasColumnName("RequestStatusName").IsRequired().HasColumnType("nvarchar");
        }
    }

    // RequestTypes
    public class CV2_RequestTypeConfiguration : EntityTypeConfiguration<CV2_RequestType>
    {
        public CV2_RequestTypeConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_RequestTypeConfiguration(string schema)
        {
            ToTable(schema + ".RequestTypes");
            HasKey(x => x.RequestTypeId);

            Property(x => x.RequestTypeId).HasColumnName("RequestTypeId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.RequestValue).HasColumnName("RequestValue").IsRequired().HasColumnType("nvarchar");
            Property(x => x.RequestValueHelpText).HasColumnName("RequestValueHelpText").IsRequired().HasColumnType("nvarchar");
        }
    }

    // SccmDeploymentDetails
    public class CV2_SccmDeploymentDetailConfiguration : EntityTypeConfiguration<CV2_SccmDeploymentDetail>
    {
        public CV2_SccmDeploymentDetailConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_SccmDeploymentDetailConfiguration(string schema)
        {
            ToTable(schema + ".SccmDeploymentDetails");
            HasKey(x => x.ProductId);

            Property(x => x.ProductId).HasColumnName("ProductId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.SccmContentLocation).HasColumnName("SccmContentLocation").IsOptional().HasColumnType("nvarchar");
            Property(x => x.SccmInstallCommand).HasColumnName("SccmInstallCommand").IsOptional().HasColumnType("nvarchar");
            Property(x => x.SccmUninstallCommand).HasColumnName("SccmUninstallCommand").IsOptional().HasColumnType("nvarchar");
            Property(x => x.SccmDeploymentNotes).HasColumnName("SccmDeploymentNotes").IsOptional().HasColumnType("nvarchar");
            Property(x => x.SccmRebootRequired).HasColumnName("SccmRebootRequired").IsOptional().HasColumnType("bit");
            Property(x => x.SccmOnDemandGroup).HasColumnName("SccmOnDemandGroup").IsOptional().HasColumnType("nvarchar");

            // Foreign keys
            HasRequired(a => a.CV2_Product).WithOptional(b => b.CV2_SccmDeploymentDetail); // FK_CV2.SccmDeploymentDetails_CV2.Products_ProductId
        }
    }

    // SccmReturnCodes
    public class CV2_SccmReturnCodeConfiguration : EntityTypeConfiguration<CV2_SccmReturnCode>
    {
        public CV2_SccmReturnCodeConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_SccmReturnCodeConfiguration(string schema)
        {
            ToTable(schema + ".SccmReturnCodes");
            HasKey(x => x.SccmReturnCodeId);

            Property(x => x.SccmReturnCodeId).HasColumnName("SccmReturnCodeId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ReturnCode).HasColumnName("ReturnCode").IsRequired().HasColumnType("int");
            Property(x => x.ReturnCodeDescription).HasColumnName("ReturnCodeDescription").IsRequired().HasColumnType("nvarchar");
            Property(x => x.ProductId).HasColumnName("ProductId").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.CV2_Product).WithMany(b => b.CV2_SccmReturnCodes).HasForeignKey(c => c.ProductId); // FK_cv2.SccmReturnCodes_CV2.Products_ProductId
        }
    }

    // SccmRules
    public class CV2_SccmRuleConfiguration : EntityTypeConfiguration<CV2_SccmRule>
    {
        public CV2_SccmRuleConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_SccmRuleConfiguration(string schema)
        {
            ToTable(schema + ".SccmRules");
            HasKey(x => x.SccmRuleId);

            Property(x => x.SccmRuleId).HasColumnName("SccmRuleId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.SccmRuleType).HasColumnName("SccmRuleType").IsRequired().HasColumnType("int");
            Property(x => x.SccmRuleConnector).HasColumnName("SccmRuleConnector").IsRequired().HasColumnType("int");
            Property(x => x.SccmRuleOrder).HasColumnName("SccmRuleOrder").IsRequired().HasColumnType("int");
            Property(x => x.ProductId).HasColumnName("ProductId").IsOptional().HasColumnType("int");
            Property(x => x.FileOrFolderPath).HasColumnName("FileOrFolderPath").IsOptional().HasColumnType("nvarchar");
            Property(x => x.FileOrFolderName).HasColumnName("FileOrFolderName").IsOptional().HasColumnType("nvarchar");
            Property(x => x.FileOrFolderAssociate32On64).HasColumnName("FileOrFolderAssociate32On64").IsOptional().HasColumnType("bit");
            Property(x => x.FileOrFolderMustExist).HasColumnName("FileOrFolderMustExist").IsOptional().HasColumnType("bit");
            Property(x => x.FileOrFolderRuleType).HasColumnName("FileOrFolderRuleType").IsOptional().HasColumnType("int");
            Property(x => x.FileOrFolderRuleProperty).HasColumnName("FileOrFolderRuleProperty").IsOptional().HasColumnType("int");
            Property(x => x.FileOrFolderRuleOperator).HasColumnName("FileOrFolderRuleOperator").IsOptional().HasColumnType("int");
            Property(x => x.FileOrFolderRuleValue).HasColumnName("FileOrFolderRuleValue").IsOptional().HasColumnType("nvarchar");
            Property(x => x.RegistryHive).HasColumnName("RegistryHive").IsOptional().HasColumnType("int");
            Property(x => x.RegistryKey).HasColumnName("RegistryKey").IsOptional().HasColumnType("nvarchar");
            Property(x => x.RegistryValue).HasColumnName("RegistryValue").IsOptional().HasColumnType("nvarchar");
            Property(x => x.UseDefaultValue).HasColumnName("UseDefaultValue").IsOptional().HasColumnType("bit");
            Property(x => x.RegKeyAssociate32On64).HasColumnName("RegKeyAssociate32On64").IsOptional().HasColumnType("bit");
            Property(x => x.RegistryDataType).HasColumnName("RegistryDataType").IsOptional().HasColumnType("int");
            Property(x => x.RegKeyMustExist).HasColumnName("RegKeyMustExist").IsOptional().HasColumnType("bit");
            Property(x => x.RegRuleOperator).HasColumnName("RegRuleOperator").IsOptional().HasColumnType("int");
            Property(x => x.RegRuleValue).HasColumnName("RegRuleValue").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ProductCode).HasColumnName("ProductCode").IsOptional().HasColumnType("nvarchar");
            Property(x => x.MsiProductCodeMustExist).HasColumnName("MsiProductCodeMustExist").IsOptional().HasColumnType("bit");
            Property(x => x.MsiRuleProperty).HasColumnName("MsiRuleProperty").IsOptional().HasColumnType("int");
            Property(x => x.MsiRuleOperator).HasColumnName("MsiRuleOperator").IsOptional().HasColumnType("int");
            Property(x => x.MsiRuleValue).HasColumnName("MsiRuleValue").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Discriminator).HasColumnName("Discriminator").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.SccmRuleNote).HasColumnName("SccmRuleNote").IsOptional().HasColumnType("nvarchar");

            // Foreign keys
            HasOptional(a => a.CV2_Product).WithMany(b => b.CV2_SccmRules).HasForeignKey(c => c.ProductId); // FK_CV2.SccmRules_CV2.Products_ProductId
        }
    }

    // SoftwarePolicies
    public class CV2_SoftwarePolicyConfiguration : EntityTypeConfiguration<CV2_SoftwarePolicy>
    {
        public CV2_SoftwarePolicyConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_SoftwarePolicyConfiguration(string schema)
        {
            ToTable(schema + ".SoftwarePolicies");
            HasKey(x => x.ProductId);

            Property(x => x.ProductId).HasColumnName("ProductId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.SoftwarePolicyType).HasColumnName("SoftwarePolicyType").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.CV2_Product).WithOptional(b => b.CV2_SoftwarePolicy); // FK_CV2.SoftwarePolicies_CV2.Products_ProductId
        }
    }

    // SoftwarePolicyGroupAssociations
    public class CV2_SoftwarePolicyGroupAssociationConfiguration : EntityTypeConfiguration<CV2_SoftwarePolicyGroupAssociation>
    {
        public CV2_SoftwarePolicyGroupAssociationConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_SoftwarePolicyGroupAssociationConfiguration(string schema)
        {
            ToTable(schema + ".SoftwarePolicyGroupAssociations");
            HasKey(x => x.SoftwarePolicyGroupAssociationId);

            Property(x => x.SoftwarePolicyGroupAssociationId).HasColumnName("SoftwarePolicyGroupAssociationId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.SoftwarePolicyAdGroupName).HasColumnName("SoftwarePolicyADGroupName").IsOptional().HasColumnType("nvarchar");
            Property(x => x.SoftwarePolicyGroupDisplayName).HasColumnName("SoftwarePolicyGroupDisplayName").IsOptional().HasColumnType("nvarchar");
            Property(x => x.SoftwarePolicyGroupDescription).HasColumnName("SoftwarePolicyGroupDescription").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ProductId).HasColumnName("ProductId").IsOptional().HasColumnType("int");
            Property(x => x.SoftwarePolicySupportLevelId).HasColumnName("SoftwarePolicySupportLevelId").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.CV2_SoftwarePolicy).WithMany(b => b.CV2_SoftwarePolicyGroupAssociations).HasForeignKey(c => c.ProductId); // FK_CV2.SoftwarePolicyGroupAssociations_CV2.SoftwarePolicies_ProductId
            HasOptional(a => a.CV2_SoftwarePolicySupportLevel).WithMany(b => b.CV2_SoftwarePolicyGroupAssociations).HasForeignKey(c => c.SoftwarePolicySupportLevelId); // FK_CV2.SoftwarePolicyGroupAssociations_CV2.SoftwarePolicySupportLevels_SoftwarePolicySupportLevelId
        }
    }

    // SoftwarePolicySupportLevels
    public class CV2_SoftwarePolicySupportLevelConfiguration : EntityTypeConfiguration<CV2_SoftwarePolicySupportLevel>
    {
        public CV2_SoftwarePolicySupportLevelConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_SoftwarePolicySupportLevelConfiguration(string schema)
        {
            ToTable(schema + ".SoftwarePolicySupportLevels");
            HasKey(x => x.SoftwarePolicySupportLevelId);

            Property(x => x.SoftwarePolicySupportLevelId).HasColumnName("SoftwarePolicySupportLevelId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.SoftwarePolicySupportLevelName).HasColumnName("SoftwarePolicySupportLevelName").IsRequired().HasColumnType("nvarchar");
        }
    }

    // SoftwareRequirements
    public class CV2_SoftwareRequirementConfiguration : EntityTypeConfiguration<CV2_SoftwareRequirement>
    {
        public CV2_SoftwareRequirementConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_SoftwareRequirementConfiguration(string schema)
        {
            ToTable(schema + ".SoftwareRequirements");
            HasKey(x => x.ProductId);

            Property(x => x.ProductId).HasColumnName("ProductId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.InternetExplorerVersion).HasColumnName("InternetExplorerVersion").IsOptional().HasColumnType("nvarchar");
            Property(x => x.IisVersion).HasColumnName("IISVersion").IsOptional().HasColumnType("nvarchar");
            Property(x => x.DotNetVersion).HasColumnName("DotNetVersion").IsOptional().HasColumnType("nvarchar");
            Property(x => x.AdobeReaderVersion).HasColumnName("AdobeReaderVersion").IsOptional().HasColumnType("nvarchar");
            Property(x => x.JavaRuntimeVersion).HasColumnName("JavaRuntimeVersion").IsOptional().HasColumnType("nvarchar");
            Property(x => x.JdkVersion).HasColumnName("JDKVersion").IsOptional().HasColumnType("nvarchar");
            Property(x => x.DirectXVersion).HasColumnName("DirectXVersion").IsOptional().HasColumnType("nvarchar");
            Property(x => x.InstalledOfficeApplicationName).HasColumnName("InstalledOfficeApplicationName").IsOptional().HasColumnType("nvarchar");
            Property(x => x.InstalledOfficeApplicationVersion).HasColumnName("InstalledOfficeApplicationVersion").IsOptional().HasColumnType("nvarchar");
            Property(x => x.SqlExpressVersion).HasColumnName("SQLExpressVersion").IsOptional().HasColumnType("nvarchar");
            Property(x => x.SqlCompactVersion).HasColumnName("SQLCompactVersion").IsOptional().HasColumnType("nvarchar");
            Property(x => x.VstoRuntimeVersion).HasColumnName("VSTORuntimeVersion").IsOptional().HasColumnType("nvarchar");
            Property(x => x.InstalledOffice2003Pia).HasColumnName("InstalledOffice2003PIA").IsOptional().HasColumnType("nvarchar");
            Property(x => x.InstalledOffice2007Pia).HasColumnName("InstalledOffice2007PIA").IsOptional().HasColumnType("nvarchar");
            Property(x => x.InstalledOffice2010Pia).HasColumnName("InstalledOffice2010PIA").IsOptional().HasColumnType("nvarchar");
            Property(x => x.OfficeSharedInteropAssembly).HasColumnName("OfficeSharedInteropAssembly").IsOptional().HasColumnType("nvarchar");
            Property(x => x.PowerShellVersion).HasColumnName("PowerShellVersion").IsOptional().HasColumnType("nvarchar");

            // Foreign keys
            HasRequired(a => a.CV2_Product).WithOptional(b => b.CV2_SoftwareRequirement); // FK_CV2.SoftwareRequirements_CV2.Products_ProductId
        }
    }

    // SupersededProducts
    public class CV2_SupersededProductConfiguration : EntityTypeConfiguration<CV2_SupersededProduct>
    {
        public CV2_SupersededProductConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_SupersededProductConfiguration(string schema)
        {
            ToTable(schema + ".SupersededProducts");
            HasKey(x => new { x.BaseProductId, x.SupersededProductId });

            Property(x => x.BaseProductId).HasColumnName("BaseProductId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.SupersededProductId).HasColumnName("SupersededProductId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ProductProductId).HasColumnName("Product_ProductId").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.CV2_Product_ProductProductId).WithMany(b => b.CV2_SupersededProducts_ProductProductId).HasForeignKey(c => c.ProductProductId); // FK_CV2.SupersededProducts_CV2.Products_Product_ProductId
            HasRequired(a => a.CV2_Product_BaseProductId).WithMany(b => b.CV2_SupersededProducts_BaseProductId).HasForeignKey(c => c.BaseProductId); // FK_CV2.SupersededProducts_CV2.Products_BaseProductId
            HasRequired(a => a.CV2_Product_SupersededProductId).WithMany(b => b.CV2_SupersededProducts_SupersededProductId).HasForeignKey(c => c.SupersededProductId); // FK_CV2.SupersededProducts_CV2.Products_SupersededProductId
        }
    }

    // SystemRequirements
    public class CV2_SystemRequirementConfiguration : EntityTypeConfiguration<CV2_SystemRequirement>
    {
        public CV2_SystemRequirementConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_SystemRequirementConfiguration(string schema)
        {
            ToTable(schema + ".SystemRequirements");
            HasKey(x => x.ProductId);

            Property(x => x.ProductId).HasColumnName("ProductId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.MinimumWindowsInstallerVersion).HasColumnName("MinimumWindowsInstallerVersion").IsOptional().HasColumnType("nvarchar");
            Property(x => x.MinimumScreenResolution).HasColumnName("MinimumScreenResolution").IsOptional().HasColumnType("nvarchar");
            Property(x => x.MinimumPhysicalMemory).HasColumnName("MinimumPhysicalMemory").IsOptional().HasColumnType("nvarchar");
            Property(x => x.MinimumColorQuality).HasColumnName("MinimumColorQuality").IsOptional().HasColumnType("nvarchar");

            // Foreign keys
            HasRequired(a => a.CV2_Product).WithOptional(b => b.CV2_SystemRequirement); // FK_CV2.SystemRequirements_CV2.Products_ProductId
        }
    }

    // WorkQueues
    public class CV2_WorkQueueConfiguration : EntityTypeConfiguration<CV2_WorkQueue>
    {
        public CV2_WorkQueueConfiguration()
            : this("CV2")
        {
        }
 
        public CV2_WorkQueueConfiguration(string schema)
        {
            ToTable(schema + ".WorkQueues");
            HasKey(x => x.WorkQueueId);

            Property(x => x.WorkQueueId).HasColumnName("WorkQueueId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.CreatedOnDate).HasColumnName("CreatedOnDate").IsRequired().HasColumnType("datetime");
            Property(x => x.RowVersion).HasColumnName("RowVersion").IsRequired().IsFixedLength().HasColumnType("timestamp").HasMaxLength(8).IsRowVersion().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed);
        }
    }

    // __nhydrateobjects
    public class NhydrateobjectConfiguration : EntityTypeConfiguration<Nhydrateobject>
    {
        public NhydrateobjectConfiguration()
            : this("dbo")
        {
        }
 
        public NhydrateobjectConfiguration(string schema)
        {
            ToTable(schema + ".__nhydrateobjects");
            HasKey(x => new { x.Rowid, x.Name, x.Type, x.CreatedDate, x.ModifiedDate, x.ModelKey });

            Property(x => x.Rowid).HasColumnName("rowid").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Id).HasColumnName("id").IsOptional().HasColumnType("uniqueidentifier");
            Property(x => x.Name).HasColumnName("name").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(500);
            Property(x => x.Type).HasColumnName("type").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.Schema).HasColumnName("schema").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(500);
            Property(x => x.CreatedDate).HasColumnName("CreatedDate").IsRequired().HasColumnType("datetime");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
            Property(x => x.Hash).HasColumnName("Hash").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(32);
            Property(x => x.Status).HasColumnName("Status").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(500);
            Property(x => x.ModelKey).HasColumnName("ModelKey").IsRequired().HasColumnType("uniqueidentifier");
        }
    }

    // __nhydrateschema
    public class NhydrateschemaConfiguration : EntityTypeConfiguration<Nhydrateschema>
    {
        public NhydrateschemaConfiguration()
            : this("dbo")
        {
        }
 
        public NhydrateschemaConfiguration(string schema)
        {
            ToTable(schema + ".__nhydrateschema");
            HasKey(x => x.ModelKey);

            Property(x => x.DbVersion).HasColumnName("dbVersion").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.LastUpdate).HasColumnName("LastUpdate").IsRequired().HasColumnType("datetime");
            Property(x => x.ModelKey).HasColumnName("ModelKey").IsRequired().HasColumnType("uniqueidentifier").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.History).HasColumnName("History").IsRequired().HasColumnType("nvarchar");
        }
    }

    // PackagesToAdd
    public class PackagesToAddConfiguration : EntityTypeConfiguration<PackagesToAdd>
    {
        public PackagesToAddConfiguration()
            : this("dbo")
        {
        }
 
        public PackagesToAddConfiguration(string schema)
        {
            ToTable(schema + ".PackagesToAdd");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName("Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar");
            Property(x => x.ConfigurationRecordsId).HasColumnName("ConfigurationRecordsId").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.ConfigurationRecord).WithMany(b => b.PackagesToAdds).HasForeignKey(c => c.ConfigurationRecordsId); // FK_ConfigurationRecordsPackagesToAdd
        }
    }

    // PackagesToDelete
    public class PackagesToDeleteConfiguration : EntityTypeConfiguration<PackagesToDelete>
    {
        public PackagesToDeleteConfiguration()
            : this("dbo")
        {
        }
 
        public PackagesToDeleteConfiguration(string schema)
        {
            ToTable(schema + ".PackagesToDelete");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName("Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar");
            Property(x => x.ConfigurationRecordsId).HasColumnName("ConfigurationRecordsId").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.ConfigurationRecord).WithMany(b => b.PackagesToDeletes).HasForeignKey(c => c.ConfigurationRecordsId); // FK_ConfigurationRecordsPackagesToDelete
        }
    }

    // ProductSummaryView
    public class ProductSummaryViewConfiguration : EntityTypeConfiguration<ProductSummaryView>
    {
        public ProductSummaryViewConfiguration()
            : this("dbo")
        {
        }
 
        public ProductSummaryViewConfiguration(string schema)
        {
            ToTable(schema + ".ProductSummaryView");
            HasKey(x => new { x.ProductId, x.ProductName, x.ProductVersion, x.ProductStatus, x.ProductContactRoleName, x.ProductDslId, x.ProductCosmicId, x.RequestTitle, x.ProductContactName, x.RequestId });

            Property(x => x.ProductId).HasColumnName("ProductId").IsRequired().HasColumnType("int");
            Property(x => x.LegacyId).HasColumnName("LegacyId").IsOptional().HasColumnType("int");
            Property(x => x.ProductName).HasColumnName("ProductName").IsRequired().HasColumnType("nvarchar");
            Property(x => x.ProductVersion).HasColumnName("ProductVersion").IsRequired().HasColumnType("nvarchar");
            Property(x => x.ProductManufacturer).HasColumnName("ProductManufacturer").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ProductStatus).HasColumnName("ProductStatus").IsRequired().HasColumnType("int");
            Property(x => x.ProductDescription).HasColumnName("ProductDescription").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ProductContactRoleName).HasColumnName("ProductContactRoleName").IsRequired().HasColumnType("nvarchar");
            Property(x => x.ProductDslId).HasColumnName("ProductDslId").IsRequired().HasColumnType("int");
            Property(x => x.ProductCosmicId).HasColumnName("ProductCosmicId").IsRequired().HasColumnType("int");
            Property(x => x.RequestTitle).HasColumnName("RequestTitle").IsRequired().HasColumnType("nvarchar");
            Property(x => x.ProductContactName).HasColumnName("ProductContactName").IsRequired().HasColumnType("nvarchar");
            Property(x => x.RequestId).HasColumnName("RequestId").IsRequired().HasColumnType("int");
        }
    }

    // SoftwareExceptions
    public class SoftwareExceptionConfiguration : EntityTypeConfiguration<SoftwareException>
    {
        public SoftwareExceptionConfiguration()
            : this("dbo")
        {
        }
 
        public SoftwareExceptionConfiguration(string schema)
        {
            ToTable(schema + ".SoftwareExceptions");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName("Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.WorkstationName).HasColumnName("WorkstationName").IsRequired().HasColumnType("nvarchar");
            Property(x => x.SourcePackageName).HasColumnName("SourcePackageName").IsRequired().HasColumnType("nvarchar");
            Property(x => x.DestinationPackageName).HasColumnName("DestinationPackageName").IsRequired().HasColumnType("nvarchar");
            Property(x => x.PrePostProcessFlag).HasColumnName("PrePostProcessFlag").IsRequired().HasColumnType("varbinary");
            Property(x => x.ConfigurationRecordsId).HasColumnName("ConfigurationRecordsId").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.ConfigurationRecord).WithMany(b => b.SoftwareExceptions).HasForeignKey(c => c.ConfigurationRecordsId); // FK_ConfigurationRecordsSoftwareExceptions
        }
    }


    // ************************************************************************
    // Stored procedure return models

}

